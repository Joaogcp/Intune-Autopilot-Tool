#############################
#DEFINE YOUR TENANT DATA HERE
#############################
#Azure Tenant App and Secret
[string]$mainURL = #Blob Storage .JSON file containing the "TenantID, ApplicationID and ApplicationSecret"
[string]$mainSASToken = #SAS Token to access the .JSON file.

#GUI DLLs
[string]$mahAppsURL = #Blob Storage file URL - 'MahApps.Metro.dll' needed for some Controls in the GUI, avaliable at https://mahapps.com/
[string]$mahAppsToken = #SAS Token to access the 'MahApps.Metro.dll' file.
[string]$controlzExURL = #Blob Storage file URL - 'ControlzEx.dll' needed for some Controls in the GUI, avaliable at https://mahapps.com/
[string]$controlzExToken = #SAS Token to access the 'ControlzEx.dll' file.
[string]$xamlBehaviorsURL = #Blob Storage file URL - 'Microsoft.Xaml.Behaviours.dll' needed for some Controls in the GUI, avaliable at https://mahapps.com/
[string]$xmlBehavioursToken = #SAS Token to access the 'ControlzEx.dll' file.

#Azure Storage Account
[string]$mainSA = #Azure Storage Account Name
[string]$mainSAToken = #SAS Token to upload the Log file to the Storage Account.
[string]$mainSAAccessToken = #SAS Token to upload the Log data to Azure Log Analytics.

#Main Company Name
[string]$Global:externalCompanyName = #Your company name here
#Define Main Hashtable
$mainUI = [hashtable]::Synchronized(@{ })
	
	#region Read from Main Parameters Variables
	[string]$BlobUrl = $mainURL
	[string]$BlobSasToken = $mainSASToken
	[string]$SA = $mainSA
	[string]$SAToken = $mainSAToken
	[string]$SAAccessToken = $mainSAAccessToken
	[string]$stringMahApps = $mahAppsURL
	[string]$tokenMahApps = $mahAppsToken
	[string]$stringcontrolzEx = $controlzExURL
	[string]$tokencontrolzEx = $controlzExToken
	[string]$stringxamlBehaviors = $xamlBehaviorsURL
	[string]$tokenXMLbehaviours = $xmlBehavioursToken
	#endregion Read from Main Parameters Variables
	
	#region Setup required Assets
	#If the Tool was never executed before
	[string]$sourceLocation = 'C:\ProgramData\VIT-MEM-AutopilotTool'
	If (!(Test-Path $sourceLocation))
	{
		[string]$DLLUri1 = '{0}?{1}' -f ($stringMahApps, $tokenMahApps)
		[string]$DLLUri2 = '{0}?{1}' -f ($stringcontrolzEx, $tokencontrolzEx)
		[string]$DLLUri3 = '{0}?{1}' -f ($stringxamlBehaviors, $tokenXMLbehaviours)
		mkdir $sourceLocation | Out-Null
		mkdir "$sourceLocation\sources" | Out-Null
		mkdir "$sourceLocation\bin" | Out-Null
		Invoke-WebRequest -Uri $DLLUri1 -OutFile "$sourceLocation\bin\MahApps.Metro.dll"
		Invoke-WebRequest -Uri $DLLUri2 -OutFile "$sourceLocation\bin\ControlzEx.dll"
		Invoke-WebRequest -Uri $DLLUri3 -OutFile "$sourceLocation\bin\Microsoft.Xaml.Behaviors.dll"
		
		#region Main Assets
		#Define Main Script Image Assets
		$buttonBackgroundBase64 = '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'
		$button1Base64 = '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'
		$button2Base64 = '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'
		$button3Base64 = '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'
		$infoOnBase64 = 'iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAAEnMAABJzAYwiuQcAAATCSURBVGhD3dl56GZTHMfxkcFYwozskiWMPxg1RJKSUIqQLJH/psgg1EwpNH8oSyT5g5Q9ZSvrH5I90UiN7Fv2PdnKFn7en6ffczr3PJ/vuec+v2HiU6+a35nvub/n3N9z7z3n3HkzMzP/C7ZxSrvgOFyO+/Ei3sGXs97DajyAq3ESdoc71mC2cYAdcBYex08Ymp/xLC6AToT7HU1sY4O9cSO+xdrKj7gDS+F+Z5VtrNgCV2Cas9+a33AdtoX7DJZtDByNN/Fv5UOcCvdZJthG4yL8idb8ig/wDB7Bw3gauuB1XQzJVdgA7nMltjEzH/retuQz3IDjsQc2QXm8jbEbjsG1+Agt0cnYDOXxEtuYaRnEJ7gQW8Mdo0bX3Jl4F315EDqx7jjVgejr1BddlNvD9R9iIS7D76hFf0XXPxzIUahdE9/hRLi+pXHc/5WOgL6itZyOib4TDdB3URdlFH2vD4Drm4vianN74S1E+QrbodOv88MsPSeiaBAtD6y+uD65vsHcjk6fzg/Q3Sa6Pf6A1qduX1yf0mJ8Dhd97Q9Cqs87yk1wUccTUNZH+uL6OIciOrF6NqXavJOmBJrvuFyPvLZPX1yfyMVw0R1uT4zq8g66n7voLrIN8to+fXF9Ipvidbiswqgu7/AkXDTFzutaRXG1fU6By2vYEGkgO8N9F7Ug0sMqP+gQZVxNC33Yt1FG1+4SpIFofuSiuVN+wHXpErgsRxrIlWoxORb5wdalQ+ByK9JAtMYuowXOXNfUZVxNq63gVqRaKqSBaKOgjNYTmnbnBxsiiqtt9QLK6I6WBuKm0VoI5QcZKoqrbXUvymjalAaiu1OZzpNzClFcbatbUEaTyOpAHkJ+kKGiuNpWN6PM10gDeV8tRZ5CfpChorjaVvegzMdIA3lJLUV03SxAfqAhorjaVs+hzBtIA9E2ZplfMJfdvyiutsWW0PVQRoNLA7lGLSbay8oPNkQUV9viQLjciTSQk9ViEi72G0RxtS1WwGU0qVXBetgV2lQr8ymq+0kVUVxtn/XxKlxGq9ZxoQbzPFyWIT9oqyiuto829FzSDSkvPh8uujVvjry2RRRXW6MpvLurKprsjuryDjshWh9r8yyvbRHF1dacCxetRfbBqK7sdBdcdP0cjrK+JoqrjewHbQa6PAFdEqPasuO+iLYtv4C2i8o+kSiu1tkRblU4TufE5h3HtGMSRe9HWgcTxdWWNIiXEeU+dPp0fpilBUxt/1WD0as317dUxtWUdK3WBqGNQj0uOv06P2T0xrUWPV8Og+s7F3om9L0VOxsTfScaMnpTVIvmYto8m/aBmdMt9jx8j1om9nzHbOMsvVR5FH3RE/c0bAR3nBr9Dr2bd0vtMnqNrc06d5zqQERn282MXbR2vhTar629vVqEg7ESa9ASLburu522saCzpsnjkHwDnWXdXbRdo5Wd1tuaBrnVaC23IfxLjNnGwBnoe5u0NqOtn3PgPssE21ihW6PO8F/4J3M3hjx8Bw9kTLt+unbc1H/a/IHHcCTc76yyjQPowait/Vcw7V9Jzw3NYjWvcr+jiW2cgm4I+iDaUNaFrbuMtvy1eaZ1trZs9G9tFOg2queBVnb7Yy4bHIlt/O+Zmfc3HSPV5ynvTuYAAAAASUVORK5CYII='
		$infoOffBase64 = 'iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAAEnMAABJzAYwiuQcAAATxSURBVGhD3dl5qGZzHMfxEcaaNbtkyfaHJUMkkWTJli1LJCVFBhlFyZI/lCVC/iBi7Nn3P5BlTCKyxYw9xj4j2bIv1/t9556n7/09v/Oc9dbwqdfc6Z7n/J7ne+5zzvn9vmfa2NjY/8Lif/rJxjgEl+B+vIT38fWED/EyHsIVOBKboXP6KGR9nIKn8BMcrIlf8DxmwQPRKl0K2RrX41vED9bFj7gNM9AobQpZFZeizdGv63dcg3VQK00L2R/vIL7pVPoEx6AyTQo5F38jvtEov+FjzMFjeBTPwRPe8yK3T5nLsSxKU6eQZeD3Ng5c5gtch0OxOVZEmhWwKQ7CVViA3FgpD8bKyKZOIXWK+AxnYS00jefcyfgAubGjh+GBHUpVIX6d4kA5npTroWtWx8X4A7n3KfhXHMqoQvbFqHPiOxyBullq4mdV9oZf0dx7Fo7DpJQV4nfRkzLuHPm93glVWQke5dfxJjyaa6AqW+Jd5N5bC7EuBikrxPtE3DGyiDo3LE/qp5Hu/xr6KOZWDJIrxKtN2eXxB9S9656I3Bg6D3WyFb5Ebgy/9rtgPLlCbkDcoeCOh6FubkZuHHlPqZvdUXZgB+OkhTglcL4TX1y4Fk1yNXLj6C40yfnIjeMVbgsMFeL1PL6w4FVkbTTJzvgHufEOQJN40ZiH3FgXYaiQZxBfVHCK3SYn4WcU4/yJc9AmRyN+psLbmB4L2Qi576ILIm9WbeN03/XKTOzgL1pmOt5D+vk8d7eLhTg/ii8oOHdaUnIBcp9xZizksrAhOhhLSnZD7jPOjoW4xo4b5QKn65p6PzyAR+AavUvWRG5FOicWYqMgbpTrCe/QbeMN6y/EMQ9El7yIOJ7mxUJy02gXQl3imj4d80F0yb1Ix1wQC/HqFDeqyR04F2986Zh2W7okN2NYWFWI3+suuQPpmE+iS25COuaiWMhHYUPhWXTJVBRyD9IxP42FvBI2FDxvlkfbTEUhc5GOOT8WYhszbtSvaN39I30XshpcVKVjzo2FXBk2RPay2qbvQpyIpuPp9ljIUWFDlF3s10zfhZyNdDzNioVsAptq8QX6HKX9pIr0WcjSeAvpeJoRC7HL8cLEhpTT8TbpsxAbeulYGr8gxULMmYgvKnhpXgVN01chTuFzV1U52V1cQyhkQ5Stj23rNE1fhZyOdBy5FtkGQ4WYOxFfXPD82QtN0scUZXvYDEzHke2m8cZfrpBtUda2/Aq2i+rmRqRjNJn2bIDcqrAwOLC5Qowdk7hD5PORusXsgXT/w1EnFvEq0v0L92GQskJcwIzqv1qMa/E6cQntnM2pxQn+okY8V0cVYaPQ28UgZYUYV3Nx55T3lz3Rd+xkVj0VOxWTMqoQ45OiOEDKuZjNs7Y3zBgvsWfge+TeqzCp51ukqhAfqjyOOFCOd9xjsRyaxvfw2XxuqZ3yMbbNuqFUFWI82rmZcY7dwAthv3bU0yu78bvCZt0byI2Vctld2u2sU4jxqDl5jANX+QYeZa8us+HKzvW206DcanSUW5D9SxSpW0iR41H1NKlPtn5OQ2WaFmK8NHqEyxrUfbkbtW++bQopYtfPcyc39W/LHtgT2AeN0qWQIt4Ybe37jLDtX8n7hrNY51Wt0kchRbwg+EHsuntie5Wx5e8zR9fZiyb+Px9eRr0f+LhiR3RpcIxnUMh/39i0fwHGCtBIJZIBswAAAABJRU5ErkJggg=='
		$sliderOnBase64 = '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'
		$sliderOffBase64 = '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'
		$powerOnBase64 = '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'
		$powerOffBase64 = 'iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAAEnMAABJzAYwiuQcAAAx5SURBVGhDxZoLbJbVGccPl5ZC5RparmVAi3KXi5MirdgW0XILpdACCkJvtKUttJTe6JXegN5bCpLFmM3MxGVjMducmmXJEmPizLZsiZuJOt0Wkzm3Gbe5Rbe5/X/n61vffj0tNNatyT8f7Xvec57/c3/Oh+np7XWi7+pVU1dfb/Lz882ZM2cGP3NyckxWVpY5deqUKSsrM3V1daa2tnYQNTU15uLFi+b06YKF0dHRT4SHh78lvLNkyZKn9V5MY2OjXeMH71VWVprc3Fxz8uRJk5eXZwoKCrTHaftZVFRkKioqTFd3t+no7HDCSQKMhYhfKH7XobPnz5//C2PMf/yYPXv2O+fOnVtUX9+gtZAOoLa27v9LpLy8whQXF9uDeQ7Onj1r4uPjzwWT8LAlNvZyWXm51hXbtWeE0tLS/y+RiopKc+HCBfs3hAAcumbNmq+6SIBly5Y/h4A5OacssrKyrWXZhz3/Z0QQNjs7e8Ai5aa5uVkH55uMjEyTKYIIsWrVqq+5SIBly5Z9HwKsR2iUUK9zqqqq7N6ZmZn2rC+MiIJXLnAea4SdOHEinEMqdXhLS4t1i4yMDGupvHwRWb16VCIoIUMCnxAR3KqpqdFUV1dboY8fPz5N5KbisoWFheNLhMNyc/NmbtmypWPWrFlvTp8+/bcrVqy4qYOWXb582VqFAzMyM6xFVq9ePYprBYicFHEs0NDQYN9XEpgvS35de/9m5syZv964cePj2Tk5kSUlJZZI+echgsnRzLFjx748b968YVlo8eLFP1PqDCfdnj9/3moZi9wOEayBltva2sylS5dCpJgfBq+dM2fOm2lpaQnE0C0t0iuhXei/1m9aW1vNzp07M6ZMmfKX4EM8JOuHmPG71u0QyczMMocOHTIpBw6YpKSke11rweTJkz9OTEwsptagYBcJYLp7uoehp7fHXH/8utm7d2+pa3M/du/efRDzEzOWCMF+SyK5du2uXbtMQkKi2bx58wOutX4kJCQ0o+DOrk7T3tEudAyBwcf9uHLliumWCaXoMteGfsif31fmWkC1LisvC7jWbREJuFZV1QXT3t6uYG+aGRkZ+ZZrvR/bt2+/hGy4I3L6MYwIrB/Rj2sjP2bMmPGutPpgT0+P6ZBGikuKrXvddoycOGkL4lXF4o0bN4jFe4kJ1zt+7N+/v4gzFVdDMEjgktDV1U3F3ayY+KtrEw9r1659JjcvL4psg0YbFOyZWQN1JJB+b0nEqyOyhunv7zednZ24Z8TGTZu+4nrPw6RJkz5RtkvCMn4DDPpYZ2cXn2GLo6J+7trAw7Zt2y7VN9STLm1f1SEi1BnSqa+O3JoIdURWoVZgFbRKrNXW1RoFd4XrXQ9z5859u7mleRaeYF2rTa7VeqnVZqeu7i7z8MMP17he9JC0I6mBeKCdQHhqAKmXaow1xpK1IIJVIINV8Hv2pA/j97379p11ve8hLj6+D+W3SHZgEAwiytVL5VJ/c70Etm7deg1zXtGBNbU1pkiHUmc43Eu9YybiswoWofChJEhhpR07djS69gBysX/p7LtxK4hLo43WPPfdd1+/6wWwdOnSV8Q6jDhqaW2xbUm1WvZSFUEs4VljrK6FRQKxkmH7turqGilVwatzkKm9vWPCqlWrn3ftAzZs2PAM6ywRAlU91MKwsDBn0QsJCflYvru+q6trMEOgBTZAk35rjNkiEMEqCvr8/NPWEv7UypnqwZZOmzbtQ9desso/le5XolQ7nT300EMj+qP6q6teXAxCDV5lVaVRL2Sz1eciMgAqPR0wbusf1BTUBH+day+g5NNMPbLNWFRU1MuuRaGhoR+pafwSfQ5u5OG8eh9qgBfkfgQK4uhtvCXiIwFwL4YszsLNPNBZyyPm3HHHHe+79ouIiHhdGTSEuWKpBP6Ha9G6deu+Sa3Aan6QdkmVCE6fNYicbNuqKEaecu0HROR5ddLWen4F4KJn1aA2NFzU/vVDQNzExsZed+03ceLETx977LENRpXykGsBSE9PT/WGHj9wr9MFp+3hfmEQjrZfE+Ljrv3A8ujomxDBlfxgL5TA3sHnoTjNQCP2YwqNfLNp0yYl4eEPqe6y1iJmEVr5YHhDTzB4JuXsde0Jdu/Zc5KB7Jz2HQYVWd7H2n7wd52n1m767117KrM9YTQHfMv1cMGCBT8lr5+WcGjKD7ROnFAQ0ZYfWJDkEB8f3zxhwoQhe95zzz3X6usbJrIu2F15j5hg/2DloDQIyS1/4N/Pw5IlS35kJPArrocxMTE3C7QBU9ypYChY+TtugBD+LAM8odR6x6kvq5PVL6pOJSEMz4LXA0ZdFESycIHCq5i94ZJVU+trRtnA2XGKZb9aErP9ge1OxMXFMV9bqwQLhcZxh4MHD2p4SrPZbd++fbZy8yx4PXsQX2rTSbVOaMDDexpcsqoG/g4i77ke3nnnnT3ydaPByQmGIp6THutqh1/SlZScMykpKVqTwqhs3ykqKhxGBItSl5gWNchZwi6kpqaa9evXV7tkFZE/QORt18Ply5f379mzh2I5ItQLkU2GuctYiPAu7fxo1gBYRMqtd8k6derUd828efN+4np41113fYMMYoN9JAwEJv7tj5WxEAHEHO7ndQcuED+KkasuWRUjr8PyWdfDxYsX/7isrFy+XmpK5O8uEAcIzH2XX7CxEOGGhG6BTzKhC95NpGR9ziWr4vklow6y2/VQ5vpARSoCrbuySDCIFc8qt0OEtRQ7NH0rIIMm0jBp3hkG8p6nTPKuXcddD8HRo0f34sPBlXYk4GIIGiBSMiIRj4xXbL3CNxKwiGJxk+rSv11yKlY1FGVmrlW/4lyg/P8kE2DVBQlK6zACqmuq7YEFBYW2fkAeIYcTKbLPEIzYovHEMihgNDBvJCUlOTMWRffRRx+NRSMhkZGRv3Qt0hzwgQ5bQHqskOu4ABFiheyVJzdg4vOqMUQA9YYMiJsQTxDLztYIoADnhhL/p21xwSqrqipUSelXLhnnzJnzls4Ps2ZWT9/mWgSUFpsYvhCaOPCDQ9AqXS/C4ssMSQjIDWJycrJJVVE8cuSIrTvp6YdthYZIoJUP3P9iTeYQFHahmnlnANqfdictLS3dJRuI3Rrbi1XtRbU2vZsZ2LVQQf+hXCGGax/GXOZ7wKTIBl56VCttiVATaOmxxIM7H7TVXYJwsWGJQPzYseODREgUfGJVKjyu5wG3rq2rDZc1XnfJRkjk5uVugqwVhn8o8l9wLQYalJ7n6oVZGhKMugQrgYrQIxGhiFki6QNEDo9MhHeIB/ZGSa0CF3GJSYnO7hysXLnyBdZbIgQqzCXA9uBu1Q8JdfH69ev2Rhx3JAbGmwj7oSDmdi7R9fcUad3pKQxUejeurb3NXoZYEgBm6mWcLb0HCZXDpQAHkoHGkwjfXJWcI/MVWHkUS7HqoZyXDmDjxo1Pt3FvrAm2qbnpsytTXEdZInpaePifXS8O4FMFcAFzNQKNNxHihEqu5JAYHh7ubGaBBqz3lGyicPPGpkZBRLyrF9DX12dUBEcskB40IPVLY1OpGaTR8SDCZ0VlBevylHg+dp3rQan+AF9/2OupywEMWgRcucxdUjezhrM582PhwoWvaqZPpnYgBHVkLERyBojgSrwvK6zTrP+M6yw/EhITW7wLbJKPB7lU5xCwSJioTnPUePGg8fO7mkt2iMCEYtUDSKDtA6ojnxFJF5Fkc/jwEVszIFtYWGTdSVVZobn+WkhIyN9d+/uxefPmJ7iwJriJi0B8BMC15DB0d/eQ0qZpTL3p2tAF5fpXt22Lq+erOBW8JftTUqZQEA/LCkcfOaoWZQ8WCVUBXKjimHD//feXqGt9cfLkyZ+49guGmtsnr7S1TcalAl+3SfE+KDa4ohyKywMu1tLSOkn9lnNOHg1chs+YMeONuXPnvqxx4MWoqKgXIyIiXmJuoMC63hkNmvdbaWWuKf339vU64SQC2tr4SqzZtglykdLQ0NARb+q/KKjX+6Osl4EMXN71Xe0b8s2zH04SgJaEm3q+G6RFV2BukGaHfYX8RSE6Jubb6tmisQQ4c/bM5ySivE5+J9XKvyfIOtlymddch48HFi1a9KoyXhpXUWQ4vodhguReeFyIMNqSZdhcmYlATlPGuu1gHQ3KWB+tWLHiWWW4XWVl5ydScDUR2jaIbjlgkXEkQmplpuDrhHzVDGqA0uwatdIlIvU9Alz92p8k3KhgjarzG8pa31HNKjyQmhpTUMj/dSmV0NwRlIhI7hiI9Jr/Ahr3Fs1MTagQAAAAAElFTkSuQmCC'
		
		#Export Main Script Image Assets
		[byte[]]$buttonBackgroundBytes = [convert]::FromBase64String($buttonBackgroundBase64)
		[System.IO.File]::WriteAllBytes("$sourceLocation\sources\buttonBackground.png", $buttonBackgroundBytes)
		[byte[]]$button1Bytes = [convert]::FromBase64String($button1Base64)
		[System.IO.File]::WriteAllBytes("$sourceLocation\sources\button1.png", $button1Bytes)
		[byte[]]$button2Bytes = [convert]::FromBase64String($button2Base64)
		[System.IO.File]::WriteAllBytes("$sourceLocation\sources\button2.png", $button2Bytes)
		[byte[]]$button3Bytes = [convert]::FromBase64String($button3Base64)
		[System.IO.File]::WriteAllBytes("$sourceLocation\sources\button3.png", $button3Bytes)
		[byte[]]$infoOnBytes = [convert]::FromBase64String($infoOnBase64)
		[System.IO.File]::WriteAllBytes("$sourceLocation\sources\infoOn.png", $infoOnBytes)
		[byte[]]$infoOffBytes = [convert]::FromBase64String($infoOffBase64)
		[System.IO.File]::WriteAllBytes("$sourceLocation\sources\infoOff.png", $infoOffBytes)
		[byte[]]$sliderOnBytes = [convert]::FromBase64String($sliderOnBase64)
		[System.IO.File]::WriteAllBytes("$sourceLocation\sources\sliderOn.png", $sliderOnBytes)
		[byte[]]$sliderOffBytes = [convert]::FromBase64String($sliderOffBase64)
		[System.IO.File]::WriteAllBytes("$sourceLocation\sources\sliderOff.png", $sliderOffBytes)
		[byte[]]$powerOnBytes = [convert]::FromBase64String($powerOnBase64)
		[System.IO.File]::WriteAllBytes("$sourceLocation\sources\powerOn.png", $powerOnBytes)
		[byte[]]$powerOffBytes = [convert]::FromBase64String($powerOffBase64)
		[System.IO.File]::WriteAllBytes("$sourceLocation\sources\powerOff.png", $powerOffBytes)
		
		#endregion Main Assets
	}
	#endregion Setup required Assets
	
	#region Load Assemblies
	#Load Assemblies
	Add-Type -AssemblyName PresentationFramework, PresentationCore, WindowsBase, System.Windows.Forms, System.Drawing, System.DirectoryServices.AccountManagement
	Add-Type -Path "$sourceLocation\bin\MahApps.Metro.dll"
	Add-Type -Path "$sourceLocation\bin\ControlzEx.dll"
	Add-Type -Path "$sourceLocation\bin\Microsoft.Xaml.Behaviors.dll"
	[void][System.Windows.Forms.Application]::EnableVisualStyles()
	#endregion Load Assemblies
	
	#region Main Functions
	
	#region Function Get-AzureBlobStorageItem
	Function Get-AzureBlobStorageItem
	{
        <#
.SYNOPSIS
Lists blobs for an azure blob storage path.
.DESCRIPTION
Lists blobs for an azure blob storage path using REST API.
.PARAMETER Url
Specifies the azure share URL.
.PARAMETER SasToken
Specifies the azure share SAS token.
.EXAMPLE
Get-AzureBlobStorageItem -Url 'https://<storageaccount>.blob.core.windows.net/<Container>' -Sas 'SomeAccessToken'
.EXAMPLE
Get-AzureBlobStorageItem -Url 'https://<storageaccount>.blob.core.windows.net/<Container>/<blob>' -Sas 'SomeAccessToken'
.INPUTS
None.
.OUTPUTS
System.Array.
.NOTES
This is an internal script function and should typically not be called directly.
Credit to Roger Zander
.LINK
https://rzander.azurewebsites.net/download-files-from-azure-blob-storage-with-powershell/
.LINK
https://MEM.Zone
.LINK
https://MEM.Zone/GIT
.COMPONENT
Azure Blob Storage Rest API
.FUNCTIONALITY
List Blob Items
#>
		[CmdletBinding()]
		Param (
			[Parameter(Mandatory = $true, HelpMessage = 'Share URL:', Position = 0)]
			[ValidateNotNullorEmpty()]
			[Alias('Location')]
			[string]$Url,
			[Parameter(Mandatory = $true, HelpMessage = 'Share SAS Token:', Position = 1)]
			[ValidateNotNullorEmpty()]
			[Alias('Sas')]
			[string]$SasToken
		)
		
		Begin
		{
			
			## Remove the '?' from the SAS string if needed
			If ($SasToken[0] -eq '?') { $SasToken = $SasToken -replace ('\?', '') }
			
			## Set file name regex pattern
			[regex]$RegexPattern = '[\w]+\.[A-Za-z0-9]*$'
		}
		Process
		{
			Try
			{
				
				## Extract blob name from the URL if it exist
				$BlobName = $($Url | Select-String -AllMatches -Pattern $RegexPattern | Select-Object -ExpandProperty 'Matches').Value
				
				## If URL is a single blob, get the properties
				If (-not [string]::IsNullOrEmpty($BlobName))
				{
					# Build URI
					[string]$Uri = '{0}?{1}' -f ($Url, $SasToken)
					# Invoke REST API
					$Blob = Invoke-RestMethod -Uri $Uri -Method 'Head' -UseBasicParsing
					# Build the output object
					$AzureBlobList = [pscustomobject]@{
						'Name'	   = $BlobName
						'Size(KB)' = '{0:N2}' -f ($Blob.Headers.'Content-Length' / 1KB)
						'Url'	   = $Url
					}
				}
				
				## Else list the directory content
				Else
				{
					# Build URI
					[string]$Uri = '{0}?{1}&{2}' -f ($Url, 'restype=container&comp=list', $SasToken)
					# Invoke REST API
					$Response = Invoke-RestMethod -Uri $Uri -Method 'Get' -Verbose:$false
					# Cleanup response and convert to XML
					$Xml = [xml]$Response.Substring($Response.IndexOf('<'))
					# Get the file objects
					$Blobs = $Xml.ChildNodes.Blobs.Blob
					# Build the output object
					$AzureBlobList = ForEach ($Blob in $Blobs)
					{
						[pscustomobject]@{
							'Name'	   = $Blob.Name
							'Size(KB)' = '{0:N2}' -f ($Blob.Properties.'Content-Length' / 1KB)
							'Url'	   = '{0}/{1}' -f ($Url, $Blob.Name)
						}
					}
				}
			}
			Catch
			{
				$PSCmdlet.ThrowTerminatingError($PSItem)
			}
			Finally
			{
				Write-Output -InputObject $AzureBlobList
			}
		}
		End
		{
		}
	}
	#endregion
	
	#region Function Start-AzureBlobStorageTransfer
	Function Start-AzureBlobStorageTransfer
	{
        <#
.SYNOPSIS
Starts an azure blob storage transfer.
.DESCRIPTION
Starts an azure blob storage transfer using bits or outputs a single blob content to the pipeline.
.PARAMETER Url
Specifies the azure containter URL.
.PARAMETER SasToken
Specifies the azure blob/container SAS security token.
.PARAMETER Path
Specifies the destination path for the dowloaded blobs.
.PARAMETER Force
Overwrites the existing blob even if it has the same name and size. I can't think why this would be needed but I added it anyway.
.PARAMETER BlobContentOnly
This switch specifies return the content of the blob to the pipeline if the azure URL points to a single blob.
.EXAMPLE
Start-AzureBlobStorageTransfer -Url 'https://<storageaccount>.blob.core.windows.net/<Containter>' -SasToken '<AccessToken>' -Path 'D:\Temp' -Force
.EXAMPLE
Start-AzureBlobStorageTransfer -Url 'https://<storageaccount>.blob.core.windows.net/<Container>/<Blob>' -SasToken 'SomeAccessToken' -BlobContentOnly
.INPUTS
None.
.OUTPUTS
System.Array.
System.String.
.NOTES
If the blob is already present and has the same size, Operation will return 'Skipped'.
If the blob is already present and has the same size, but 'Force' parameter has been specified, Operation will return 'Overwritten'.
This is an internal script function and should typically not be called directly.
Credit to Roger Zander
.LINK
https://rzander.azurewebsites.net/download-files-from-azure-blob-storage-with-powershell/
.LINK
https://MEM.Zone
.LINK
https://MEM.Zone/GIT
.LINK
https://MEM.Zone/ISSUES
.COMPONENT
Azure Blob Storage Rest API
.FUNCTIONALITY
Downloads to local storage
#>
		[CmdletBinding()]
		Param (
			[Parameter(Mandatory = $true, ParameterSetName = 'GetBlobs', HelpMessage = 'Containter or Blob URL:', Position = 0)]
			[Parameter(Mandatory = $true, ParameterSetName = 'GetContent', HelpMessage = 'Containter or Blob URL:', Position = 0)]
			[ValidateNotNullorEmpty()]
			[Alias('Location')]
			[string]$Url,
			[Parameter(Mandatory = $true, ParameterSetName = 'GetBlobs', HelpMessage = 'Containter or Blob SAS Token:', Position = 1)]
			[Parameter(Mandatory = $true, ParameterSetName = 'GetContent', HelpMessage = 'Containter or Blob SAS Token:', Position = 1)]
			[ValidateNotNullorEmpty()]
			[Alias('Sas')]
			[string]$SasToken,
			[Parameter(Mandatory = $true, ParameterSetName = 'GetBlobs', HelpMessage = 'Local Download Path:', Position = 2)]
			[Parameter(Mandatory = $false, ParameterSetName = 'GetContent', HelpMessage = 'Local Download Path:', Position = 2)]
			[Alias('Destination')]
			[string]$Path,
			[Parameter(Mandatory = $false, ParameterSetName = 'GetBlobs')]
			[Alias('Overwrite')]
			[switch]$Force,
			[Parameter(Mandatory = $false, ParameterSetName = 'GetContent')]
			[Alias('GetContent')]
			[switch]$BlobContentOnly
		)
		Begin
		{
			
			## Remove the '?' from the SAS string if needed
			If ($SasToken[0] -eq '?') { $SasToken = $SasToken -replace ('\?', '') }
		}
		Process
		{
			Try
			{
				
				## Get azure blob list
				$AzureBlobList = Get-AzureBlobStorageItem -Url $Url -Sas $SasToken
				
				## If $GetContent is specified and there is just one blob, get blob content.
				If ($PSCmdlet.ParameterSetName -eq 'GetContent')
				{
					# Check if just one item is found
					If (($AzureBlobList | Measure-Object).Count -eq 1)
					{
						# Build URI
						[string]$Uri = '{0}?{1}' -f ($Url, $SasToken)
						# Invoke REST API
						$Result = Invoke-RestMethod -Uri $Uri -Method 'Get' -UseBasicParsing
					}
					Else { Throw 'Cannot get content for more than one blob at a time!' }
				}
				Else
				{
					
					## Get local blob list
					$LocalBlobList = Get-ChildItem -Path $Path -File -ErrorAction 'SilentlyContinue' | Select-Object -Property 'Name', @{ Name = 'Size(KB)'; Expression = { '{0:N2}' -f ($_.Length / 1KB) } }
					
					## Create destination folder
					New-Item -Path $Path -ItemType 'Directory' -ErrorAction 'SilentlyContinue' | Out-Null
					
					## Process blobs one by one
					$Result = ForEach ($Blob in $AzureBlobList)
					{
						
						## If the blob is already present and the same size, set the 'Skip' flag.
						[psobject]$LocalBlobLookup = $LocalBlobList | Where-Object { $_.Name -eq $Blob.Name -and $_.'Size(KB)' -eq $Blob.'Size(KB)' } | Select-Object -Property 'Name'
						[boolean]$SkipBlob = [boolean](-not [string]::IsNullOrEmpty($LocalBlobLookup))
						
						## Assemble Destination and URI
						[string]$Destination = Join-Path -Path $Path -ChildPath $Blob.Name
						[string]$Uri = '{0}?{1}' -f ($Blob.Url, $SasToken)
						[boolean]$Overwite = $Force -and $SkipBlob
						
						## Tansfer blob using BITS
						If (-not $SkipBlob -or $Force) { Start-BitsTransfer -Source $Uri -Destination $Destination -HttpMethod 'Get' -Description $Destination -DisplayName $Blob.Url -ErrorAction 'Stop' }
						
						## Check if last operation was successful and set error message
						[boolean]$ShowError = If ($?) { $false; $ErrorMessage = $null }
						else { $true; $ErrorMessage = -join ('Error: ', $Error[0].Exception.Message) };
						
						## Build output object
						[pscustomobject]@{
							'Name'	   = $Blob.Name
							'Size(KB)' = '{0:N2}' -f ($Blob.'Size(KB)')
							'Url'	   = $Blob.Url
							'Path'	   = $Path
							'Operation' = Switch ($true)
							{
								$ShowError { $ErrorMessage; break }
								$Overwite { 'Overwritten'; break }
								$SkipBlob { 'Skipped'; break }
								Default { 'Downloaded' }
							}
						}
					}
				}
			}
			Catch
			{
				$PSCmdlet.ThrowTerminatingError($PSItem)
			}
			Finally
			{
				Write-Output -InputObject $Result
			}
		}
		End
		{
		}
	}
	#endregion
	
	#region Function Get-StaticFiles
	function Get-StaticFiles
	{
    <#
.SYNOPSIS
Get-StaticFiles from the Azure Storage Blob: Static

.DESCRIPTION
with this cmdlet you can get the static files that you need for your script. 
For example a HTML template.

.PARAMETER Storage
The StorageAccountName 

.PARAMETER Container
The StorageContainer

.PARAMETER FileName
Add a file name if you're only looking for 1 file.
If you leave this empty it will search for all files and return them in a CustomObject under Filename, Content:

Filename                                                     Content
--------                                                     -------
XXXXXXXXXXXXXXXXXXXXXXX.html <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">...
HybridWorker_Suspended_Import-PSSession.png                  PNG...

.EXAMPLE

Get-StaticFiles -headers $headers -Storage 'XXXXXX' -Container 'XXXXXX'

Filename                                                     Content
--------                                                     -------
XXXXXXXXXXXXXXXXXXXXXXX.html <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">...
HybridWorker_Suspended_Import-PSSession.png                  PNG...

.EXAMPLE
$filename = 'HybridWorker_Suspended_Import-PSSession.png'
Get-StaticFiles -headers $headers -Storage 'XXXXXX' -Container 'XXXXXX' -Filename

<HTML Content>

.NOTES
Author: Bas Wijdenes

.LINK
https://bwit.blog/how-to-download-a-zip-file-from-an-azure-storage-blob-powershell/
#>
		[CmdletBinding()]
		param (
			[parameter(mandatory = $true)]
			[string]$Storage,
			[parameter(mandatory = $true)]
			[string]$Container,
			[parameter(mandatory = $false)]
			[string]$FileName = '?restype=container&comp=list',
			[parameter(mandatory = $true)]
			$headers
		)
		begin
		{
			Write-Verbose "Get-StaticFiles: begin: AzureStorage: $Storage | AzureStorageBlob: $Container"
			if (!($Filename -eq '?restype=container&comp=list'))
			{
				Write-Verbose "Get-StaticFiles: begin: Filename: $Filename"
				$Uri = 'https://{0}.blob.core.windows.net/{1}/{2}' -f $($Storage), $Container, $FileName
			}
			else
			{
				Write-Verbose "Get-StaticFiles: begin: No filename defined | Getting all files"
				$Uri = 'https://{0}.blob.core.windows.net/{1}{2}' -f $($Storage), $Container, $FileName
			}
			Write-Verbose "Get-StaticFiles: begin: Uri: $Uri"
			$InvokeSplatting = @{
				Uri	    = $Uri
				Method  = 'Get'
				headers = $Headers
			}
		}
		process
		{
			try
			{
				if (!($Filename -eq '?restype=container&comp=list'))
				{
					Write-Verbose "Get-StaticFiles: process: Getting content for file: $Filename"
					$Return = Invoke-RestMethod @InvokeSplatting
				}
				else
				{
					Write-Verbose "Get-StaticFiles: process: Getting content for script: $scriptname"
					$Invoke = Invoke-RestMethod @InvokeSplatting
					Write-Verbose 'Get-StaticFiles: process: removing prefix: ï»¿<?xml version="1.0" encoding="utf-8"?>'
					$xml = $Invoke.Substring(3).replace('ï»¿<?xml version="1.0" encoding="utf-8"?>', '')
					Write-Verbose "XML: $XML"
					Write-Verbose 'Get-StaticFiles: process: Selecting filenames from XML'
					$Files = Select-Xml -Content $xml -XPath '/EnumerationResults/Blobs/Blob/Name' | ForEach-Object { $_.Node.InnerXML }
					Write-Verbose "ConvertedXML: $Files"
					$Return = [System.Collections.Generic.List[System.Object]]::new()
					Write-Verbose "Get-StaticFiles: process: Filecount: $($Files.count)"
					foreach ($File in $Files)
					{
						Write-Verbose "Get-StaticFiles: process: Starting Get-StaticFiles | filename: $File"
						$Content = Get-StaticFiles -Filename $File -Storage $Storage -Container $Container -Headers $Headers
						$Object = [PSCustomObject]@{
							Filename = $File
							Content  = $Content
						}
						$Return.Add($Object)
					}
				}
			}
			catch
			{
				throw $_
			}
		}
		end
		{
			if (!($Filename -eq '?restype=container&comp=list'))
			{
				Write-Verbose "Get-StaticFiles: end: returning content for $Filename"
			}
			else
			{
				Write-Verbose "Get-StaticFiles: end: Finished foreach loop | returning contents"
			}
			return $Return
		}
	}
	#endregion Function Get-StaticFiles
	
	#region Function New-Signature
	Function New-Signature ($customerId, $sharedKey, $date, $contentLength, $method, $contentType, $resource)
	{
		$xHeaders = "x-ms-date:" + $date
		$stringToHash = $method + "`n" + $contentLength + "`n" + $contentType + "`n" + $xHeaders + "`n" + $resource
		
		$bytesToHash = [Text.Encoding]::UTF8.GetBytes($stringToHash)
		$keyBytes = [Convert]::FromBase64String($sharedKey)
		
		$sha256 = New-Object System.Security.Cryptography.HMACSHA256
		$sha256.Key = $keyBytes
		$calculatedHash = $sha256.ComputeHash($bytesToHash)
		$encodedHash = [Convert]::ToBase64String($calculatedHash)
		$authorization = 'SharedKey {0}:{1}' -f $customerId, $encodedHash
		return $authorization
	}#endregion Function New-Signature
	
	#region Function Send-LogAnalyticsData
	Function Send-LogAnalyticsData
	{
		
		[cmdletbinding()]
		param (
			[Parameter(Mandatory = $true, HelpMessage = 'CustomerID:', Position = 1)]
			[ValidateNotNullorEmpty()]
			[Alias('Customer')]
			[string]$CustomerID,
			[Parameter(Mandatory = $true, HelpMessage = 'SharedKey:', Position = 1)]
			[ValidateNotNullorEmpty()]
			[Alias('Key')]
			[string]$SharedKey,
			[Parameter(Mandatory = $true, HelpMessage = 'Body:', Position = 1)]
			[ValidateNotNullorEmpty()]
			[Alias('Body')]
			$Body2,
			[Parameter(Mandatory = $true, HelpMessage = 'Log Type:', Position = 1)]
			[ValidateNotNullorEmpty()]
			[Alias('Log')]
			[string]$LogType
		)
		
		$methodlogs = "POST"
		$contentType = "application/json"
		$resource = "/api/logs"
		$rfc1123date = [DateTime]::UtcNow.ToString("r")
		$contentLength = $Body2.Length
		$signature = New-Signature `
								   -customerId $customerId `
								   -sharedKey $sharedKey `
								   -date $rfc1123date `
								   -contentLength $contentLength `
								   -method $methodlogs `
								   -contentType $contentType `
								   -resource $resource
		$urilogs = "https://" + $customerId + ".ods.opinsights.azure.com" + $resource + "?api-version=2016-04-01"
		
		#validate that payload data does not exceed limits
		if ($Body2.Length -gt (31.9 * 1024 * 1024))
		{
			throw ("Upload payload is too big and exceed the 32Mb limit for a single upload. Please reduce the payload size. Current payload size is: " + ($Body2.Length/1024/1024).ToString("#.#") + "Mb")
		}
		
		$payloadsize = ("Upload payload size is " + ($Body2.Length/1024).ToString("#.#") + "Kb ")
		
		$headerslogs = @{
			"Authorization"	       = $signature;
			"Log-Type"			   = $LogType;
			"x-ms-date"		       = $rfc1123date;
			"time-generated-field" = $Global:TimeStampField;
		}
		
		$response = Invoke-WebRequest -Uri $urilogs -Method $methodlogs -ContentType $contentType -Headers $headerslogs -Body $body2 -UseBasicParsing
		$statusmessage = "$($response.StatusCode) : $($payloadsize)"
		return $statusmessage
	}
	#endregion function Send-LogAnalyticsData
	
	#region Function Add-JobTracker
	function Add-JobTracker
	{
    <#
        .SYNOPSIS
            Add a new job to the JobTracker and starts the timer.
    
        .DESCRIPTION
            Add a new job to the JobTracker and starts the timer.
    
        .PARAMETER  Name
            The name to assign to the Job
    
        .PARAMETER  JobScript
            The script block that the Job will be performing. 
            Important: Do not access form controls from this script block.
    
        .PARAMETER ArgumentList
            The arguments to pass to the job
    
        .PARAMETER  CompleteScript
            The script block that will be called when the job is complete.
            The job is passed as an argument. The Job argument is null when the job fails.
    
        .PARAMETER  UpdateScript
            The script block that will be called each time the timer ticks. 
            The job is passed as an argument. Use this to get the Job's progress.
    
        .EXAMPLE
            Job-Begin -Name "JobName" `
            -JobScript {    
                Param($Argument1)#Pass any arguments using the ArgumentList parameter
                #Important: Do not access form controls from this script block.
                Get-WmiObject Win32_Process -Namespace "root\CIMV2"
            }`
            -CompletedScript {
                Param($Job)        
                $results = Receive-Job -Job $Job        
            }`
            -UpdateScript {
                Param($Job)
                #$results = Receive-Job -Job $Job -Keep
            }
    
        .LINK
            
    #>
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$Name,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[ScriptBlock]$JobScript,
			$ArgumentList = $null,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript)
		
		#Start the Job
		$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
		if ($job -ne $null)
		{
			#Create a Custom Object to keep track of the Job & Script Blocks
			$psObject = New-Object System.Management.Automation.PSObject
			
			Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name Job -Value $job
			Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name CompleteScript -Value $CompletedScript
			Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name UpdateScript -Value $UpdateScript
			[void]$Global:JobTrackerList.Add($psObject)
			
			#Start the Timer
			if (-not $Global:timerJobTracker.Enabled)
			{
				$Global:timerJobTracker.Start()
			}
		}
		elseif ($CompletedScript -ne $null)
		{
			#Failed
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	#endregion Function Add-JobTracker
	
	#region Function Update-JobTracker
	function Update-JobTracker
	{
    <#
        .SYNOPSIS
            Checks the status of each job on the list.
    #>
		
		#Poll the jobs for status updates
		$Global:timerJobTracker.Stop() #Freeze the Timer
		
		for ($index = 0; $index -lt $Global:JobTrackerList.Count; $index++)
		{
			$psObject = $Global:JobTrackerList[$index]
			
			if ($psObject -ne $null)
			{
				if ($psObject.Job -ne $null)
				{
					if ($psObject.Job.State -ne "Running")
					{
						#Call the Complete Script Block
						if ($psObject.CompleteScript -ne $null)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
							#$result | Out-File "C:\resultlist.txt" -Append
						}
						
						$Global:JobTrackerList.RemoveAt($index)
						Remove-Job -Job $psObject.Job
						$index-- #Step back so we don't skip a job
					}
					elseif ($psObject.UpdateScript -ne $null)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
					}
				}
			}
			else
			{
				$Global:JobTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if ($Global:JobTrackerList.Count -gt 0)
		{
			$Global:timerJobTracker.Start() #Resume the timer    
		}
	}
	#endregion Update-JobTracker
	
	#region Function Stop-JobTracker
	function Stop-JobTracker
	{
   <#
        .SYNOPSIS
            Stops and removes all Jobs from the list.
    #>
		#Stop the timer
		$Global:timerJobTracker.Stop()
		
		#Remove all the jobs
		while ($Global:JobTrackerList.Count -gt 0)
		{
			$job = $Global:JobTrackerList[0].Job
			$Global:JobTrackerList.RemoveAt(0)
			Stop-Job $job
			Remove-Job $job
		}
	}
	#endregion Function Stop-JobTracker
	
	#region Function Create-Log
	Function Create-Log
	{
        <#
.SYNOPSIS
Creates a Log entry and appends it to a Log file.
.DESCRIPTION
Creates a Log entry and appends it to a Log file.
.PARAMETER Type
Specifies the type of Log (Informational, Success or Error).
.PARAMETER Message
Specifies the log message to append.
.EXAMPLE
Create-Log -Type 2 -Message "Installation successful."
.EXAMPLE
Create-Log -Type 3 -Message "Installation failed."
.INPUTS
[int]Type,[String]Message
.OUTPUTS
.None
.LINK
#Todo
.FUNCTIONALITY
Creates a Log file and entry
#>
		Param
		(
			[Parameter(Mandatory = $false)]
			$Message,
			[int]$Type
		)
		$LogDeviceName = $env:COMPUTERNAME
		$Global:logFile = "C:\ProgramData\Autopilot_$Global:SerialNumber`_LOG.txt"
		$Time = Get-Date -Format "HH:mm:ss"
		$Date = Get-Date -Format "MM-dd-yyyy"
		switch ($Type)
		{
			1 { $TypeMessage = "INFORMATIONAL" }
			2 { $TypeMessage = "SUCCESS" }
			3 { $TypeMessage = "ERROR" }
			
		}
		$LogMessage = "Device: " + $LogDeviceName + ", Severety: " + $TypeMessage + ", Date: " + $Date + ", Time: " + $Time + ", Message: " + $Message + "<br>"
		$LogMessage | Out-File -Append -Encoding utf8 -FilePath $Global:logFile
	}
	
	#endregion Function Create-Log
	
	#region Function Get-UserInformation
	Function Get-UserInformation
	{
        <#
.SYNOPSIS
Queries AAD information for a specific User through Microsoft GRAPH
.INPUTS
None.
.OUTPUTS
None.
.NOTES
This is an internal script function and should typically not be called directly.
.LINK
#ToBeDone
.COMPONENT
Microsoft GRAPH API
.FUNCTIONALITY
Queries AAD information for a specific User through Microsoft GRAPH
#>
		Begin
		{
			#Read the TextBox input
			[string]$deviceOwner = $mainUI.richTextBox2.Text
			
			#Clear the main RichTextBox
			$mainUI.richTextBox1.Document.Blocks.Clear()
		}
		Process
		{
			$mainUI.richTextBox1.VerticalScrollBarVisibility = "Auto"
			#Make sure the User is valid
			If (($deviceOwner -notlike "#Replace me -> @*companyName*.com") -or ($Null -eq $deviceOwner))
			{
				
				#Create a WPF Document and Paragraph
				$flowDocument = New-Object System.Windows.Documents.FlowDocument
				$paragraph = New-Object System.Windows.Documents.Paragraph
				
				
				#Define Paragraph 1
				$runObj = New-Object System.Windows.Documents.Run
				$paragraph.FontFamily = "Open Sans"
				$paragraph.FontSize = '12'
				$paragraph.Inlines.Add([System.Windows.Documents.Run]("Please make sure that you are inputing a "))
				$runObj.FontWeight = "Bold"
				$runObj.Text = "VALID $Global:externalCompanyName Username"
				$paragraph.Inlines.Add($runObj)
				$paragraph.Inlines.Add([System.Windows.Documents.Run](" . (Example: john.doe@*companyName*.com)`r`n"))
				$flowDocument.Blocks.Add($paragraph)
				$mainUI.richTextBox1.Document = $flowDocument
			}
			
			#Easter Egg =)
			ElseIf ($deviceOwner -eq "#ReplaceMe john.doe@*companyName*.com")
			{
				
				#Create a WPF Document and Paragraph
				$flowDocument = New-Object System.Windows.Documents.FlowDocument
				$paragraph = New-Object System.Windows.Documents.Paragraph
				
				
				#Define Paragraph 1
				$runObj = New-Object System.Windows.Documents.Run
				$paragraph.FontFamily = "Open Sans"
				$paragraph.FontSize = '12'
				$paragraph.Inlines.Add([System.Windows.Documents.Run]("Very funny! =)"))
				$flowDocument.Blocks.Add($paragraph)
				$mainUI.richTextBox1.Document = $flowDocument
			}
		
		#Else If it is a valid Company Username, check If it exists
			Else
			{
				Try
				{
					$auth = $Global:authHeader.Authorization
					#Create a New Job using the Job Tracker
					Add-JobTracker -Name "checkUser" -ArgumentList ($deviceOwner, $auth) -JobScript {
						param ($deviceOwner,
							$auth)
						
						#Define variables
						$owner = $deviceOwner
						$header = $auth
						$privateToken = @{
							'Content-Type'  = 'application\json'
							'Authorization' = $header
						}
						
						#Create a result Object
						$psObject = New-Object System.Management.Automation.PSObject
						
						#Code Execution
						Try
						{
							$queriedUser = Invoke-RestMethod -Uri "https://graph.microsoft.com/beta/users`?`$filter=userPrincipalName eq '$owner'" -Method GET -Headers $privateToken -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
							$queriedUserJSON = $queriedUser.value
							
							#Populate result Object
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name userName -Value $queriedUserJSON.userPrincipalName
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name companyName -Value $queriedUserJSON.companyName
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name groupTag -Value $queriedUserJSON.extension_16db5763993a4e819bc7dd1824184322_msDS_cloudExtensionAttribute5
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name skuLicenses -Value $queriedUserJSON.assignedLicenses.SkuId
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name userID -Value $queriedUserJSON.id
							
						}
						Catch
						{
							#Populate result Object
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name userName -Value 'Null'
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name companyName -Value 'Null'
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name groupTag -Value 'Null'
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name skuLicenses -Value 'Null'
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name userID -Value 'Null'
						}
						$psObject
					} -UpdateScript { Start-Sleep -Milliseconds 50 } -CompletedScript {
						Param ($Job)
						$results = Receive-Job -Job $Job
						
						#Treat the results
						If (($null -ne $results.userName) -and ($results.userName -notlike 'Null') -and ($results.userName -like "#ReplaceMe *@companyName.com"))
						{
							#Define new flowDocument and Paragraph
							$flowDocument = New-Object System.Windows.Documents.FlowDocument
							$paragraph = New-Object System.Windows.Documents.Paragraph
							$runObj = New-Object System.Windows.Documents.Run
							
							[string]$stringLabel = 'Username:'
							[string]$Global:owner = $results.userName
							[string]$Global:deviceOwnerID = $results.userID
							$Global:scriptPhase = 4
							$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.titleheader1.Header = "Checking setup requirements. . ." })
							#Define Paragraph 1
							$paragraph.FontFamily = "Open Sans"
							$paragraph.FontSize = '12'
							$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
							For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $Global:owner.Length); $i++)
							{
								If ($i % 2)
								{
									$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
								}
								Else
								{
									$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
								}
							}
							$runObj.FontWeight = "Bold"
							$runObj.Text = "$Global:owner"
							$paragraph.Inlines.Add($runObj)
							$flowDocument.Blocks.Add($paragraph)
							$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument }
							)
							Remove-Variable flowDocument -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
							Remove-Variable paragraph -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
							Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
							
							#Get the User Company
							If ($Null -ne $results.companyName)
							{
								[string]$Global:companyName = $results.companyName
								Create-Log -Type 1 -Message "The User: $Global:owner belongs to the following Company: $Global:companyName."
							}
							
							#Else If the User does not have a Company Assigned
							Else
							{
								[string]$Global:companyName = 'N/A'
								Create-Log -Type 1 -Message "The User: $Global:owner is not assigned to any Company."
							}
							
							#Write to Host
							$flowDocument = $mainUI.richTextBox1.Document
							$paragraph = New-Object System.Windows.Documents.Paragraph
							$runObj = New-Object System.Windows.Documents.Run
							[string]$stringLabel = 'Company:'
							
							#Define Paragraph 1
							$paragraph.FontFamily = "Open Sans"
							$paragraph.FontSize = '12'
							$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
							For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $Global:companyName.Length); $i++)
							{
								If ($i % 2)
								{
									$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
								}
								Else
								{
									$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
								}
							}
							$runObj.FontWeight = "Bold"
							$runObj.Text = "$Global:companyName"
							$paragraph.Inlines.Add($runObj)
							$flowDocument.Blocks.Add($paragraph)
							$mainUI.richTextBox1.Dispatcher.Invoke(
								[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
							)
							Remove-Variable flowDocument -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
							Remove-Variable paragraph -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
							Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
							
							#Get the User GroupTag
							If ($Null -ne $results.groupTag)
							{
								[string]$Global:groupTag = $results.groupTag
								Create-Log -Type 1 -Message "The User: $Global:owner has the following GroupTag: $Global:groupTag."
								[string]$gt = $results.groupTag
							}
							
							#Else If the User does not have a GroupTag
							Else
							{
								Create-Log -Type 1 -Message "The User: $Global:owner does not have a GroupTag."
								[string]$gt = 'N/A'
							}
							
							#Write to Host
							$flowDocument = $mainUI.richTextBox1.Document
							$paragraph = New-Object System.Windows.Documents.Paragraph
							$runObj = New-Object System.Windows.Documents.Run
							[string]$stringLabel = 'GroupTag:'
							
							#Define Paragraph 1
							$paragraph.FontFamily = "Open Sans"
							$paragraph.FontSize = '12'
							$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
							For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $gt.Length); $i++)
							{
								If ($i % 2)
								{
									$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
								}
								Else
								{
									$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
								}
							}
							$runObj.FontWeight = "Bold"
							$runObj.Text = "$gt"
							$paragraph.Inlines.Add($runObj)
							$flowDocument.Blocks.Add($paragraph)
							$mainUI.richTextBox1.Dispatcher.Invoke(
								[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
							)
							Remove-Variable flowDocument -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
							Remove-Variable paragraph -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
							Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
							
							#Make sure the User has an Intune License assigned
							If ($Null -ne $results.skuLicenses)
							{
								
								
								#If any of the User's Licenses matches a valid Intune License
								If ($results.skuLicenses -like "*efccb6f7-5641-4e0e-bd10-b4976e1bf68e*")
								{
									[string]$Global:assignedLicense = 'EMS E3'
									Create-Log -Type 1 -Message "The User: $Global:owner has a valid Intune License: Enterprise Mobility + Security E3."
									$Global:validation_UserInfo = $True
								}
								ElseIf ($results.skuLicenses -like "*b05e124f-c7cc-45a0-a6aa-8cf78c946968*")
								{
									[string]$Global:assignedLicense = 'EMS E5'
									Create-Log -Type 1 -Message "The User: $Global:owner has a valid Intune License: Enterprise Mobility + Security E5."
									$Global:validation_UserInfo = $True
								}
								
								#ElseIf the User does not have a valid Intune License
								Else
								{
									[string]$Global:assignedLicense = 'N/A'
									#Log Error
									Create-Log -Type 2 -Message "The User: $Global:owner does NOT have a valid Intune License."
									
									#Present Error to User
									$mainUI.richTextBox1.Document.Blocks.Clear()
									$paragraph = New-Object System.Windows.Documents.Paragraph
									$flowDocument = $mainUI.richTextBox1.Document
									
									#Define Paragraph 1
									$runObj = New-Object System.Windows.Documents.Run
									$paragraph.Inlines.Add([System.Windows.Documents.Run]("The User: $deviceOwner does "))
									$paragraph.FontFamily = "Open Sans"
									$paragraph.FontSize = '12'
									$runObj.FontWeight = "Bold"
									$runObj.Text = "NOT have a valid Intune License"
									$paragraph.Inlines.Add($runObj)
									$paragraph.Inlines.Add([System.Windows.Documents.Run](".`r`nYou can request an Intune License by $Global:externalCompanyName IT Support."))
									$flowDocument.Blocks.Add($paragraph)
									$mainUI.richTextBox1.Document = $flowDocument
									Set-ErrorScreen
								}
								
								#Write to Host
								$flowDocument = $mainUI.richTextBox1.Document
								$paragraph = New-Object System.Windows.Documents.Paragraph
								$runObj = New-Object System.Windows.Documents.Run
								[string]$stringLabel = 'Licensing:'
								
								#Define Paragraph 1
								$paragraph.FontFamily = "Open Sans"
								$paragraph.FontSize = '12'
								$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
								For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $gt.Length); $i++)
								{
									If ($i % 2)
									{
										$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
									}
									Else
									{
										$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
									}
								}
								$runObj.FontWeight = "Bold"
								$runObj.Text = "$Global:assignedLicense"
								$paragraph.Inlines.Add($runObj)
								$flowDocument.Blocks.Add($paragraph)
								$mainUI.richTextBox1.Dispatcher.Invoke(
									[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
								)
								Remove-Variable flowDocument -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
								Remove-Variable paragraph -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
								Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
								If ($Global:validation_UserInfo) { Get-GroupTagAutopilotProfile }
							}
							
							#The User does not have a any Licesnes assigned
							Else
							{
								
								#Log Error
								Create-Log -Type 3 -Message "The User: $Global:owner does not have any Licenses assigned."
								
								$mainUI.richTextBox1.Document.Blocks.Clear()
								#Present Error to User
								$flowDocument = New-Object System.Windows.Documents.FlowDocument
								$paragraph = New-Object System.Windows.Documents.Paragraph
								$flowDocument = $mainUI.richTextBox1.Document
								
								#Define Paragraph 1
								$runObj = New-Object System.Windows.Documents.Run
								$paragraph.FontFamily = "Open Sans"
								$paragraph.FontSize = '12'
								$paragraph.Inlines.Add([System.Windows.Documents.Run]("The User: $deviceOwner does "))
								$runObj.FontWeight = "Bold"
								$runObj.Text = "NOT have any Microsoft Licenses assigned"
								$paragraph.Inlines.Add($runObj)
								$paragraph.Inlines.Add([System.Windows.Documents.Run](".`r`nYou can request Microsoft Licenses by $Global:externalCompanyName IT Support."))
								$flowDocument.Blocks.Add($paragraph)
								$mainUI.richTextBox1.Document = $flowDocument
								Set-ErrorScreen
							}
						}
					
					#ElseIf The User does not exist in the Company AAD
						Else
						{
							
							#Present Error to User
							#$flowDocument = New-Object System.Windows.Documents.FlowDocument
							$paragraph = New-Object System.Windows.Documents.Paragraph
							$flowDocument = $mainUI.richTextBox1.Document
							
							#Define Paragraph 1
							$runObj = New-Object System.Windows.Documents.Run
							$paragraph.Inlines.Add([System.Windows.Documents.Run]("The User: $owner does "))
							$paragraph.FontFamily = "Open Sans"
							$paragraph.FontSize = '12'
							$runObj.FontWeight = "Bold"
							$runObj.Text = "NOT exist in the $Global:externalCompanyName AAD"
							$paragraph.Inlines.Add($runObj)
							$paragraph.Inlines.Add([System.Windows.Documents.Run](".`r`nPlease make sure you are inputing a "))
							Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
							$runObj = New-Object System.Windows.Documents.Run
							$runObj.FontWeight = "Bold"
							$runObj.Text = "valid"
							$paragraph.Inlines.Add($runObj)
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" $Global:externalCompanyName Username."))
							$flowDocument.Blocks.Add($paragraph)
							$mainUI.richTextBox1.Document = $flowDocument
						}
						Return $Global:validation_UserInfo
					}
				}
				Catch
				{
					#Log Error
					Create-Log -Type 3 -Message "Setup error at Get-UserInformation internal Function."
					$privateLogMessage = "StatusCode: " + $_.Exception.Response.StatusCode.value
					Create-Log -Type 3 -Message $privateLogMessage
					$privateLogMessage = "StatusDescription: " + $_.Exception.Response.StatusDescription
					Create-Log -Type 3 -Message $privateLogMessage
				}
			}
		}
		End
		{
			
			#Clean Variables
			Remove-Variable stringLabel -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
			Remove-Variable i -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
			Remove-Variable gt -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
			Remove-Variable license -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
			Remove-Variable flowDocument -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
			Remove-Variable paragraph -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
			Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
			Remove-Variable privateLogMessage -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
			Remove-Variable deviceOwner -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
		}
		
	}
	#endregion Function Get-UserInformation
	
	#region Function Get-GroupTagAutopilotProfile
	Function Get-GroupTagAutopilotProfile
	{
        <#
.SYNOPSIS
Queries Microsoft Intune information for specific Autopilot Deployment Profile via Microsoft GRAPH, based on the Global Variable: GroupTag
.INPUTS
None.
.OUTPUTS
None.
.NOTES
This is an internal script function and should typically not be called directly.
.LINK
#ToBeDone
.COMPONENT
Microsoft GRAPH API
.FUNCTIONALITY
Queries Microsoft Intune information for specific Autopilot Deployment Profile via Microsoft GRAPH, based on the Global Variable: GroupTag
#>
		Begin
		{
			Create-Log -Type 1 -Message "Getting Autopilot Deployment Profile."
			
			#Define local Variables
			$autopilotProfileURL = "https://graph.microsoft.com/beta/deviceManagement/windowsAutopilotDeploymentProfiles"
		}
		Process
		{
			Add-JobTracker -Name "checkGroupTag" -ArgumentList ($Global:groupTag) -JobScript {
				#If the User has a GroupTag
				If ($Null -ne $Global:groupTag)
				{
					
					#Get all AutoPilot Profiles information to verify if Tag has a Deployment Profile in Intune
					Try
					{
						$autopilotProfileInfo = Invoke-RestMethod -Uri $autopilotProfileURL -Method GET -Headers $Global:authHeader -UseBasicParsing -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
						$autopilotProfiles = $autopilotProfileInfo.value
					}
					
					#Log the Error
					Catch
					{
						Create-Log -Type 3 -Message "Error querying Microsoft GRAPH for Intune Autopilot Deployment Profiles."
						$privateLogMessage = "StatusCode: " + $_.Exception.Response.StatusCode.value
						Create-Log -Type 3 -Message $privateLogMessage
						$privateLogMessage = "StatusDescription: " + $_.Exception.Response.StatusDescription
						Create-Log -Type 3 -Message $privateLogMessage
					}
					
					#Filter the list of Deployment Profiles for results matching the GroupTag
					$verifyAutopilotProfile = $AutopilotProfiles | Where-Object { $_.devicenameTemplate -like "*$Global:groupTag*" }
					
					#If the GroupTag has a corresponding Deployment Profile in Intune
					If ($verifyAutopilotProfile)
					{
						
						#Assign the corresponding Deployment Profile
						$Global:finalProfileName = $verifyAutopilotProfile.displayName
					}
					
					#Else the GroupTag does not have a corresponding Deployment Profile in Intune
					Else
					{
						#Assign the Default Deployment Profile
						$Global:finalProfileName = "#ReplaceMe: Your company's Default Autopilot Profile Name"
					}
				}
				
				#If the User does not have a GroupTag
				ElseIf ($Null -eq $Global:groupTag)
				{
					#Assign the Default Deployment Profile
					$Global:finalProfileName = "#ReplaceMe: Your company's Default Autopilot Profile Name"
					$Global:finalProfileName
				}
			} -UpdateScript {
				Start-Sleep -Milliseconds 50
				Start-Sleep -Milliseconds 50
			} -CompletedScript {
				Param ($Job)
				$Global:finalProfileName = Receive-Job -Job $Job
				
				#Define new flowDocument and Paragraph
				$flowDocument = $mainUI.richTextBox1.Document
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				[string]$stringLabel = 'Profile:'
				
				#Define Paragraph 1
				$paragraph.FontFamily = "Open Sans"
				$paragraph.FontSize = '12'
				$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
				For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $Global:finalProfileName.Length); $i++)
				{
					If ($i % 2)
					{
						$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
					}
					Else
					{
						$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
					}
				}
				$runObj.FontWeight = "Bold"
				$runObj.Text = "$Global:finalProfileName"
				$paragraph.Inlines.Add($runObj)
				$flowDocument.Blocks.Add($paragraph)
				$mainUI.richTextBox1.Dispatcher.Invoke(
					[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
				)
				
				#Log Actions
				Create-Log -Type 1 -Message "Autopilot Deployment Profile is: $Global:finalProfileName"
				Validate-TPM
			}
		}
		End
		{
			
			#Clean Variables
			Remove-Variable autopilotProfileURL -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
		}
	}
	#endregion Function Get-GroupTagAutopilotProfile
	
	#region Function Validate-TPM
	Function Validate-TPM
	{
		Try
		{
			Add-JobTracker -Name "checkTPM" -JobScript {
				$tpmReport = Get-Tpm -InformationAction SilentlyContinue
				If ($tpmReport.TpmPresent)
				{
					$tpmVersion = Get-WmiObject -Class Win32_Tpm -Namespace root\CIMV2\Security\MicrosoftTpm | Select-Object -Property SpecVersion
					$version = $tpmVersion.SpecVersion
					$majorVersion = $version.Split(",")[0]
					If ($majorVersion -ge 2)
					{
						$Global:booltpmVersion = $True
					}
				}
				Else
				{
					$version = 'NoTPMPresent'
				}
				$version
			} -UpdateScript {
				Start-Sleep -Milliseconds 50
				Start-Sleep -Milliseconds 50
			} -CompletedScript {
				Param ($Job)
				$results = Receive-Job -Job $Job
				#Define new flowDocument and Paragraph
				$flowDocument = $mainUI.richTextBox1.Document
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				[string]$stringLabel = 'TPM Version:'
				
				
				#Treat Output
				If ($results -eq 'NoTpmPresent')
				{
					$mainUI.richTextBox1.Document.Blocks.Clear()
					$stringTPMState = 'Invalid'
					Create-Log -Type 3 -Message "This device has an $stringTPMState TPM Chip."
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $stringTPMState.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$stringTPMState"
					$paragraph.Inlines.Add($runObj)
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
					)
					Set-ErrorScreen
					
				}
				ElseIf ($null -ne $results)
				{
					$Global:tpmVersion = $results
					$majorVersion = $results.Split(",")[0]
					If ($majorVersion -lt 2)
					{
						
						$stringTPMState = 'Invalid'
						Create-Log -Type 3 -Message "This device has an $stringTPMState TPM Version: $results."
						$mainUI.richTextBox1.Dispatcher.Invoke(
							[Action]{ $mainUI.richTextBox1.Document.Blocks.Clear() }
						)
						#Define Paragraph 1
						$paragraph.FontFamily = "Open Sans"
						$paragraph.FontSize = '12'
						$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
						For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $stringTPMState.Length); $i++)
						{
							If ($i % 2)
							{
								$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
							}
							Else
							{
								$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
							}
						}
						$runObj.FontWeight = "Bold"
						$runObj.Text = "$stringTPMState"
						$paragraph.Inlines.Add($runObj)
						$flowDocument.Blocks.Add($paragraph)
						$mainUI.richTextBox1.Dispatcher.Invoke(
							[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
						)
						Set-ErrorScreen
					}
					Else
					{
						$stringTPMState = 'Valid'
						$Global:booltpmVersion = $True
						Create-Log -Type 2 -Message "This device has a $stringTPMState TPM Chip and Version: $results."
						
						#Define Paragraph 1
						$paragraph.FontFamily = "Open Sans"
						$paragraph.FontSize = '12'
						$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
						For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $stringTPMState.Length); $i++)
						{
							If ($i % 2)
							{
								$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
							}
							Else
							{
								$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
							}
						}
						$runObj.FontWeight = "Bold"
						$runObj.Text = "$stringTPMState"
						$paragraph.Inlines.Add($runObj)
						$flowDocument.Blocks.Add($paragraph)
						$mainUI.richTextBox1.Dispatcher.Invoke(
							[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
						)
						Validate-OSVersion
					}
				}
				Else
				{
					$stringTPMState = 'Invalid'
					Create-Log -Type 3 -Message "This device has an $stringTPMState TPM Chip."
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document.Blocks.Clear() }
					)
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $stringTPMState.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$stringTPMState"
					$paragraph.Inlines.Add($runObj)
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
					)
					Set-ErrorScreen
				}
			}
		}
		Catch
		{
			Create-Log -Type 3 -Message "Unable to setup TPM check Job."
			$privateLogMessage = "StatusCode: " + $_.Exception.Response.StatusCode.value
			Create-Log -Type 3 -Message $privateLogMessage
			$privateLogMessage = "StatusDescription: " + $_.Exception.Response.StatusDescription
			Create-Log -Type 3 -Message $privateLogMessage
		}
		Finally
		{
			Remove-Variable privateLogMessage -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
		}
	}
	#endregion Function Validate-TPM
	
	#region Function Validate-OSVersion
	Function Validate-OSVersion
	{
		Try
		{
			Add-JobTracker -Name "checkOSversion" -JobScript {
				[string[]]$compatibleWindowsVersions = @("Windows 10 Enterprise", "Windows 10 Education", "Windows 10 Pro for Workstations", "Windows 10 Pro Education", "Windows 10 Pro", "Windows 10 Enterprise LTSC")
				$computerInfo = get-computerinfo
				$windowspd = $computerInfo.WindowsProductName
				If ($compatibleWindowsVersions.Contains($($finalOSversion)))
				{
					$Global:boolOSVersion = $True
				}
				$windowspd
			} -UpdateScript {
				Start-Sleep -Milliseconds 50
				Start-Sleep -Milliseconds 50
			} -CompletedScript {
				Param ($Job)
				$finalOSversion = Receive-Job -Job $Job
				
				#Define new flowDocument and Paragraph
				$flowDocument = $mainUI.richTextBox1.Document
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				[string]$stringLabel = 'OS Version:'
				[string[]]$compatibleWindowsVersions = @("Windows 10 Enterprise", "Windows 10 Education", "Windows 10 Pro for Workstations", "Windows 10 Pro Education", "Windows 10 Pro", "Windows 10 Enterprise LTSC", "Windows 11 Enterprise", "Windows 11 Education", "Windows 11 Pro for Workstations", "Windows 11 Pro Education", "Windows 11 Pro", "Windows 11 Enterprise LTSC")
				$Global:osVersion = $finalOSversion
				#Treat Output
				If ($compatibleWindowsVersions.Contains($($finalOSversion)))
				{
					[string]$osVersionState = 'Valid'
					Create-Log -Type 2 -Message "This device has a $osVersionState OS Version: $finalOSversion"
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $osVersionState.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$osVersionState"
					$paragraph.Inlines.Add($runObj)
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
					)
					$Global:boolOSversion = $True
					Validate-OSBuild
				}
				Else
				{
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document.Blocks.Clear() }
					)
					[string]$osVersionState = 'Invalid'
					Create-Log -Type 2 -Message "This device has an $osVersionState OSVersion: $($computerInfo.WindowsProductName)"
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $osVersionState.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$osVersionState"
					$paragraph.Inlines.Add($runObj)
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
					)
					Set-ErrorScreen
				}
			}
			
		}
		Catch
		{
			Create-Log -Type 3 -Message "Unable to check OSVersion."
			$privateLogMessage = "StatusCode: " + $_.Exception.Response.StatusCode.value
			Create-Log -Type 3 -Message $privateLogMessage
			$privateLogMessage = "StatusDescription: " + $_.Exception.Response.StatusDescription
			Create-Log -Type 3 -Message $privateLogMessage
		}
		Finally
		{
			Remove-Variable privateLogMessage -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
		}
	}
	#endregion Function Validate-OSVersion
	
	#region Function Validate-OSBuild
	Function Validate-OSBuild
	{
		Try
		{
			Add-JobTracker -Name "checkOSBuild" -JobScript {
				$version = (Get-CimInstance Win32_OperatingSystem).Version
				If (!($version -lt "10.0.18363"))
				{
					$Global:boolOSBuild = $True
				}
				$version
			} -UpdateScript {
				Start-Sleep -Milliseconds 50
				Start-Sleep -Milliseconds 50
			} -CompletedScript {
				Param ($Job)
				$results = Receive-Job -Job $Job
				$finalOSbuild = $results
				$Global:osBuild = $finalOSbuild
				#Define new flowDocument and Paragraph
				$flowDocument = $mainUI.richTextBox1.Document
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				[string]$stringLabel = 'OS Build:'
				
				If ($finalOSbuild -lt "10.0.18363")
				{
					[string]$osBuildState = 'Invalid'
					Create-Log -Type 3 -Message "This device has an $osBuildState OSBuild: $finalOSbuild".
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $osBuildState.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$osBuildState"
					$paragraph.Inlines.Add($runObj)
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
					)
					Set-ErrorScreen
				}
				Else
				{
					[string]$osBuildState = 'Valid'
					Create-Log -Type 3 -Message "This device has a $osBuildState OSBuild: $finalOSbuild"
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $osBuildState.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$osBuildState"
					$paragraph.Inlines.Add($runObj)
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
					)
					$Global:boolOSbuild = $True
					Validate-CPU
				}
			}
		}
		Catch
		{
			Create-Log -Type 3 -Message "Unable to check OSBuild."
			$privateLogMessage = "StatusCode: " + $_.Exception.Response.StatusCode.value
			Create-Log -Type 3 -Message $privateLogMessage
			$privateLogMessage = "StatusDescription: " + $_.Exception.Response.StatusDescription
			Create-Log -Type 3 -Message $privateLogMessage
		}
		Finally
		{
			#Clean Variables
			Remove-Variable privateLogMessage -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
		}
	}
	#endregion Function Validate-OSBuild
	
	#region Function Validate-CPU
	Function Validate-CPU
	{
		Try
		{
			Add-JobTracker -Name "checkCPU" -JobScript {
				#Add needed Libraries for CPU check
				$source = @"
using Microsoft.Win32;
using System;
using System.Runtime.InteropServices;

public class CpuFamilyResult
{
public bool IsValid { get; set; }
public string Message { get; set; }
}

public class CpuFamily
{
[StructLayout(LayoutKind.Sequential)]
public struct SYSTEM_INFO
{
public ushort ProcessorArchitecture;
ushort Reserved;
public uint PageSize;
public IntPtr MinimumApplicationAddress;
public IntPtr MaximumApplicationAddress;
public IntPtr ActiveProcessorMask;
public uint NumberOfProcessors;
public uint ProcessorType;
public uint AllocationGranularity;
public ushort ProcessorLevel;
public ushort ProcessorRevision;
}

[DllImport("kernel32.dll")]
internal static extern void GetNativeSystemInfo(ref SYSTEM_INFO lpSystemInfo);

public enum ProcessorFeature : uint
{
ARM_SUPPORTED_INSTRUCTIONS = 34
}

[DllImport("kernel32.dll")]
[return: MarshalAs(UnmanagedType.Bool)]
static extern bool IsProcessorFeaturePresent(ProcessorFeature processorFeature);

private const ushort PROCESSOR_ARCHITECTURE_X86 = 0;
private const ushort PROCESSOR_ARCHITECTURE_ARM64 = 12;
private const ushort PROCESSOR_ARCHITECTURE_X64 = 9;

private const string INTEL_MANUFACTURER = "GenuineIntel";
private const string AMD_MANUFACTURER = "AuthenticAMD";
private const string QUALCOMM_MANUFACTURER = "Qualcomm Technologies Inc";

public static CpuFamilyResult Validate(string manufacturer, ushort processorArchitecture)
{
CpuFamilyResult cpuFamilyResult = new CpuFamilyResult();

if (string.IsNullOrWhiteSpace(manufacturer))
{
cpuFamilyResult.IsValid = false;
cpuFamilyResult.Message = "Manufacturer is null or empty";
return cpuFamilyResult;
}

string registryPath = "HKEY_LOCAL_MACHINE\\Hardware\\Description\\System\\CentralProcessor\\0";
SYSTEM_INFO sysInfo = new SYSTEM_INFO();
GetNativeSystemInfo(ref sysInfo);

switch (processorArchitecture)
{
case PROCESSOR_ARCHITECTURE_ARM64:

if (manufacturer.Equals(QUALCOMM_MANUFACTURER, StringComparison.OrdinalIgnoreCase))
{
bool isArmv81Supported = IsProcessorFeaturePresent(ProcessorFeature.ARM_SUPPORTED_INSTRUCTIONS);

if (!isArmv81Supported)
{
string registryName = "CP 4030";
long registryValue = (long)Registry.GetValue(registryPath, registryName, -1);
long atomicResult = (registryValue >> 20) & 0xF;

if (atomicResult >= 2)
{
isArmv81Supported = true;
}
}

cpuFamilyResult.IsValid = isArmv81Supported;
cpuFamilyResult.Message = isArmv81Supported ? "" : "Processor does not implement ARM v8.1 atomic instruction";
}
else
{
cpuFamilyResult.IsValid = false;
cpuFamilyResult.Message = "The processor isn't currently supported for Windows 11";
}

break;

case PROCESSOR_ARCHITECTURE_X64:
case PROCESSOR_ARCHITECTURE_X86:

int cpuFamily = sysInfo.ProcessorLevel;
int cpuModel = (sysInfo.ProcessorRevision >> 8) & 0xFF;
int cpuStepping = sysInfo.ProcessorRevision & 0xFF;

if (manufacturer.Equals(INTEL_MANUFACTURER, StringComparison.OrdinalIgnoreCase))
{
try
{
cpuFamilyResult.IsValid = true;
cpuFamilyResult.Message = "";

if (cpuFamily >= 6 && cpuModel <= 95 && !(cpuFamily == 6 && cpuModel == 85))
{
cpuFamilyResult.IsValid = false;
cpuFamilyResult.Message = "";
}
else if (cpuFamily == 6 && (cpuModel == 142 || cpuModel == 158) && cpuStepping == 9)
{
string registryName = "Platform Specific Field 1";
int registryValue = (int)Registry.GetValue(registryPath, registryName, -1);

if ((cpuModel == 142 && registryValue != 16) || (cpuModel == 158 && registryValue != 8))
{
cpuFamilyResult.IsValid = false;
}
cpuFamilyResult.Message = "PlatformId " + registryValue;
}
}
catch (Exception ex)
{
cpuFamilyResult.IsValid = false;
cpuFamilyResult.Message = "Exception:" + ex.GetType().Name;
}
}
else if (manufacturer.Equals(AMD_MANUFACTURER, StringComparison.OrdinalIgnoreCase))
{
cpuFamilyResult.IsValid = true;
cpuFamilyResult.Message = "";

if (cpuFamily < 23 || (cpuFamily == 23 && (cpuModel == 1 || cpuModel == 17)))
{
cpuFamilyResult.IsValid = false;
}
}
else
{
cpuFamilyResult.IsValid = false;
cpuFamilyResult.Message = "Unsupported Manufacturer: " + manufacturer + ", Architecture: " + processorArchitecture + ", CPUFamily: " + sysInfo.ProcessorLevel + ", ProcessorRevision: " + sysInfo.ProcessorRevision;
}

break;

default:
cpuFamilyResult.IsValid = false;
cpuFamilyResult.Message = "Unsupported CPU category. Manufacturer: " + manufacturer + ", Architecture: " + processorArchitecture + ", CPUFamily: " + sysInfo.ProcessorLevel + ", ProcessorRevision: " + sysInfo.ProcessorRevision;
break;
}
return cpuFamilyResult;
}
}
"@
				Add-Type -TypeDefinition $source
				$psObject = New-Object System.Management.Automation.PSObject
				#Execute
				$cpuDetails = @(Get-WmiObject -Class Win32_Processor)[0]
				$cpuFamilyResult = [CpuFamily]::Validate([String]$cpuDetails.Manufacturer, [uint16]$cpuDetails.Architecture)
				Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name cpuWidth -Value $cpuDetails.AddressWidth
				Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name cpuClock -Value $cpuDetails.MaxClockSpeed
				Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name cpuProcessors -Value $cpuDetails.NumberOfLogicalProcessors
				If ($cpuFamilyResult.IsValid)
				{
					Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name cpuFamily -Value 'Valid'
					$Global:boolCPU = $True
				}
				Else
				{
					Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name cpuFamily -Value 'Invalid'
				}
				$psObject
			} -UpdateScript {
				Start-Sleep -Milliseconds 50
				Start-Sleep -Milliseconds 50
			} -CompletedScript {
				Param ($Job)
				$cpuResults = Receive-Job -Job $Job
				
				#Define new flowDocument and Paragraph
				$flowDocument = $mainUI.richTextBox1.Document
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				[string]$stringLabel = 'CPU:'
				
				#Register Output
				$cpuAddressWidth = $hardwareHash4.output -as [int]
				$cpuClockSpeed = $hardwareHash5.output -as [int]
				$cpuLogicalProcessors = $hardwareHash6.output -as [int]
				$cpuFamilyResult = $hardwareHash7.output
				
				#Treat results
				If ($null -eq $cpuResults.cpuWidth)
				{
				Create-Log -Type 3 -Message "Unable to check CPU Details."
				Set-ErrorScreen
				}
				Else
				{
					
					# AddressWidth
					If ($cpuResults.cpuWidth -ne 64)
					{
					Create-Log -Type 3 -Message "This device does not have a x64 CPU."
					Set-ErrorScreen
					}
					[int]$ClockSpeed = ($cpuResults.cpuClock)
					# ClockSpeed is in MHz
					If ($null -eq $ClockSpeed -or $ClockSpeed -le 1000)
					{
					Create-Log -Type 3 -Message "This device does not have enough CPU Capacity in Mhz: $cpuClockSpeed."
					Set-ErrorScreen
					}
					[int]$cpulogicalProcessors = ($cpuResults.cpuProcessors)
					# Number of Logical Cores
					If ($null -eq $cpuLogicalProcessors -or $cpuLogicalProcessors -lt 2)
					{
					Create-Log -Type 3 -Message "This device does not have enough Logical Processors: $cpuLogicalProcessors."
					Set-ErrorScreen
					}
					
					If ($cpuResults.cpuFamilyResult -like "False")
					{
					Create-Log -Type 3 -Message "This CPU Generation is not compatible with Intune and Windows 11."
					Set-ErrorScreen
					}
					Else
					{
						Create-Log -Type 2 -Message "This CPU Generation is compatible with Intune."
						$Global:boolCPU = $True
						$Global:cpuCompatibility = 'Compatible'
					}
					If ($Global:boolCPU -eq $True)
					{
						[string]$stringCPUstate = 'Valid'
						
						#Define Paragraph 1
						$paragraph.FontFamily = "Open Sans"
						$paragraph.FontSize = '12'
						$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
						For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $stringCPUstate.Length); $i++)
						{
							If ($i % 2)
							{
								$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
							}
							Else
							{
								$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
							}
						}
						$runObj.FontWeight = "Bold"
						$runObj.Text = "$stringCPUstate"
						$paragraph.Inlines.Add($runObj)
						$flowDocument.Blocks.Add($paragraph)
						$mainUI.richTextBox1.Dispatcher.Invoke(
							[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
						)
						Validate-Memory
					}
					Else
					{
						[string]$stringCPUstate = 'Invalid'
						
						#Define Paragraph 1
						$paragraph.FontFamily = "Open Sans"
						$paragraph.FontSize = '12'
						$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
						For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $stringCPUstate.Length); $i++)
						{
							If ($i % 2)
							{
								$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
							}
							Else
							{
								$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
							}
						}
						$runObj.FontWeight = "Bold"
						$runObj.Text = "$stringCPUstate"
						$paragraph.Inlines.Add($runObj)
						$flowDocument.Blocks.Add($paragraph)
						$mainUI.richTextBox1.Dispatcher.Invoke(
							[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
						)
					}
				}
			}
		}
		Catch
		{
			Create-Log -Type 3 -Message "Unable to check CPU Details."
			$privateLogMessage = "StatusCode: " + $_.Exception.Response.StatusCode.value
			Create-Log -Type 3 -Message $privateLogMessage
			$privateLogMessage = "StatusDescription: " + $_.Exception.Response.StatusDescription
			Create-Log -Type 3 -Message $privateLogMessage
		}
		Finally
		{
			Remove-Variable privateLogMessage -Force -ErrorAction SilentlyContinue
		}
	}
	#endregion Function Validate-CPU
	
	#region Function Validate-Memory
	Function Validate-Memory
	{
		Try
		{
			Add-JobTracker -Name "checkMemory" -JobScript {
				$memory = Get-WmiObject Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum | Select-Object @{ Name = "SizeGB"; Expression = { $_.Sum / 1GB -as [int] } }
				If (!($memory.SizeGB -lt 4))
				{
					$Global:boolMemory = $True
				}
				$memory
			} -UpdateScript {
				Start-Sleep -Milliseconds 50
				Start-Sleep -Milliseconds 50
			} -CompletedScript {
				Param ($Job)
				$results = Receive-Job -Job $Job
				$memory = $results
				
				#Define new flowDocument and Paragraph
				$flowDocument = $mainUI.richTextBox1.Document
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				[string]$stringLabel = 'Memory:'
				
				If ($null -eq $memory)
				{
					Create-Log -Type 3 -Message "Unable to check Memory Details."
					[string]$stringMemoryState = 'Invalid'
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $stringMemoryState.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$stringMemoryState"
					$paragraph.Inlines.Add($runObj)
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
					)
				}
				Elseif ($memory.SizeGB -lt 4)
				{
					Create-Log -Type 3 -Message "This Device does not have enough Memory: $($memory.SizeGB)GB."
					[string]$stringMemoryState = 'Invalid'
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $stringMemoryState.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$stringMemoryState"
					$paragraph.Inlines.Add($runObj)
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
					)
				$Global:stringMemory = $($memory.SizeGB)
				Set-ErrorScreen
				}
				Else
				{
					Create-Log -Type 2 -Message "This Device has enough Memory: $($memory.SizeGB)GB."
					
					[string]$stringMemoryState = 'Valid'
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $stringMemoryState.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$stringMemoryState"
					$paragraph.Inlines.Add($runObj)
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
					)
					$Global:boolMemory = $True
					$Global:stringMemory = $($memory.SizeGB)
					Validate-SecureBoot
			}
		}
		
	}
	Catch
	{
		Create-Log -Type 3 -Message "Unable to check Memory Details."
		$privateLogMessage = "StatusCode: " + $_.Exception.Response.StatusCode.value
		Create-Log -Type 3 -Message $privateLogMessage
		$privateLogMessage = "StatusDescription: " + $_.Exception.Response.StatusDescription
		Create-Log -Type 3 -Message $privateLogMessage
	}
	Finally
	{
		
		#Clean Variables
		Remove-Variable privateLogMessage -Force -ErrorAction SilentlyContinue
	}
}
#endregion Function Validate-Memory
	
	#region Function Validate-SecureBoot
	Function Validate-SecureBoot
	{
		Try
		{
			Add-JobTracker -Name "checkSecureBoot" -JobScript {
				Try
				{
					Confirm-SecureBootUEFI
					[string]$secureBoot = 'True'
					$Global:boolSecureBoot = $True
				}
				Catch [System.PlatformNotSupportedException] {
					$secureBoot = 'SecureBoot is not supported or is non-UEFI computer'
				}
				Catch [System.UnauthorizedAccessException] {
					$secureBoot = 'Unauthorized Access Exception'
				}
				Catch
				{
					$secureBoot = 'SecureBoot is not supported or is non-UEFI computer'
				}
				Finally { }
				$secureBoot
			} -UpdateScript {
				Start-Sleep -Milliseconds 50
			} -CompletedScript {
				Param ($Job)
				$stringSecureBoot = Receive-Job -Job $Job
				
				If ($stringSecureBoot -eq 'True')
				{
					
					#Define new flowDocument and Paragraph
					$flowDocument = $mainUI.richTextBox1.Document
					$paragraph = New-Object System.Windows.Documents.Paragraph
					$runObj = New-Object System.Windows.Documents.Run
					[string]$stringLabel = 'SecureBoot:'
					[string]$stringSecureBootStatus = 'Valid'
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $stringSecureBootStatus.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$stringSecureBootStatus"
					$paragraph.Inlines.Add($runObj)
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument; "Normal" }
					)
					Create-Log -Type 2 -Message "This device has SecureBoot enabled."
					$Global:boolSecureBoot = $True
					$Global:secureBootStatus = 'Enabled'
					Validate-CloudConnection
				}
				Else
				{
					#Define new flowDocument and Paragraph
					$flowDocument = $mainUI.richTextBox1.Document
					$paragraph = New-Object System.Windows.Documents.Paragraph
					$runObj = New-Object System.Windows.Documents.Run
					[string]$stringLabel = 'SecureBoot:'
					[string]$stringSecureBootStatus = 'Invalid'
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $stringSecureBootStatus.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$stringSecureBootStatus"
					$paragraph.Inlines.Add($runObj)
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument; "Normal" }
					)
					Create-Log -Type 3 -Message "This device does not have SecureBoot enabled."
					Set-ErrorScreen
				}
				
			}
			
		}
		Catch
		{
			Create-Log -Type 3 -Message "Unable to check SecureBoot Details."
			$privateLogMessage = "StatusCode: " + $_.Exception.Response.StatusCode.value
			Create-Log -Type 3 -Message $privateLogMessage
			$privateLogMessage = "StatusDescription: " + $_.Exception.Response.StatusDescription
			Create-Log -Type 3 -Message $privateLogMessage
		}
		Finally { }
	}
	#endregion Function Validate-SecureBoot
	
	#region Function Validate-CloudConnection
	Function Validate-CloudConnection
	{
		Try
		{
			Add-JobTracker -Name "checkCloudConnectivity" -JobScript {
				[string]$connTest = 'True'
				[string[]]$siteList = @("www.msftconnecttest.com", "ztd.dds.microsoft.com", "cs.dds.microsoft.com", "login.live.com", "login.microsoftonline.com", "aadcdn.msauth.net",
					"licensing.mp.microsoft.com", "EnterpriseEnrollment.manage.microsoft.com", "EnterpriseEnrollment-s.manage.microsoft.com", "EnterpriseRegistration.windows.net",
					"portal.manage.microsoft.com", "enrollment.manage.microsoft.com", "fe2cr.update.microsoft.com", "euprodimedatapri.azureedge.net", "euprodimedatasec.azureedge.net",
					"euprodimedatahotfix.azureedge.net", "ztd.dds.microsoft.com", "cs.dds.microsoft.com", "config.office.com", "graph.windows.net", "manage.microsoft.com")
				
				#For each Microsof Cloud Services Gateway in siteList
				$siteList | ForEach-Object {
					$result = $Null
					
					#Test connection to Port 443
					$result = (Test-NetConnection -Port 443 $_ -InformationLevel Quiet -WarningAction SilentlyContinue -ErrorAction SilentlyContinue)
					
					#If connection fails
					If (!($result -eq "True"))
					{
						[string]$connTest = 'False'
						$Global:boolConnTest = $False
					}
				}
				$connTest
			} -UpdateScript {
				Start-Sleep -Milliseconds 50
			} -CompletedScript {
				Param ($Job)
				$connectionResult = Receive-Job -Job $Job
				#Define new flowDocument and Paragraph
				$flowDocument = $mainUI.richTextBox1.Document
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				[string]$stringLabel = 'Cloud-Connection:'
				If ($connectionResult -like "False")
				{
					$Global:validateCloudConnection = $False
					Create-Log -Type 3 "Setup failed to establish a connection to Microsoft Cloud Services."
					[string]$connState = 'Invalid'
					[string]$finalResult = 'FAILED'
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $connState.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$connState"
					$paragraph.Inlines.Add($runObj)
					
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
					)
					Set-ErrorScreen
				}
				ElseIf ($connectionResult -like "True")
				{
					[string]$connState = 'Valid'
					[string]$finalResult = 'PASSED'
					$Global:validateCloudConnection = $True
					Create-Log -Type 2 "Setup successfully established a connection to Microsoft Cloud Services."
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]($stringLabel))
					For ([int]$i = 0; $i -le ($Global:stringSize - $stringLabel.Length - $connState.Length); $i++)
					{
						If ($i % 2)
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
						Else
						{
							$paragraph.Inlines.Add([System.Windows.Documents.Run](" ."))
						}
					}
					$runObj.FontWeight = "Bold"
					$runObj.Text = "$connState"
					$paragraph.Inlines.Add($runObj)
					Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
					
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.richTextBox1.Dispatcher.Invoke(
						[Action]{ $mainUI.richTextBox1.Document = $flowDocument }
					)
					FinalValidation
				}
			}
		}
		Catch
		{
			Create-Log -Type 3 -Message "Unable to validate connectivity to some Microsoft Cloud Endpoints."
			$privateLogMessage = "StatusCode: " + $_.Exception.Response.StatusCode.value
			Create-Log -Type 3 -Message $privateLogMessage
			$privateLogMessage = "StatusDescription: " + $_.Exception.Response.StatusDescription
			Create-Log -Type 3 -Message $privateLogMessage
		}
	}
	#endregion Function ValidateCloud-Connection
	
	#region Function Get-HardwareHash
	Function Get-HardwareHash
	{
        <#
.SYNOPSIS
Generates a Hardware Hash of the Device in Intune format.
.INPUTS
None.
.OUTPUTS
Boolean.
.NOTES
This is an internal script function and should typically not be called directly.
.LINK
#ToBeDone
.COMPONENT
Microsoft Windows WMI
.FUNCTIONALITY
Generates a Hardware Hash of the Device in Intune format.
#>
		Begin
		{
			Create-Log -Type 1 -Message "Generating Hardware Hash."
			
			#Initialize local variables
			[string]$Global:deviceHardwareHash = $Null
			$session = New-CimSession
			$devDetail = (Get-CimInstance -CimSession $session -Namespace root/cimv2/mdm/dmmap -Class MDM_DevDetail_Ext01 -Filter "InstanceID='Ext' AND ParentID='./DevDetail'")
		}
		Process
		{
			
			#If there is a valid Microsoft Hardware Hash
			If ($devDetail)
			{
				$hash = $devDetail.DeviceHardwareData
				$Global:deviceHardwareHash = $hash
			}
			Else
			{
				$Global:deviceHardwareHash = $Null
			}
		}
		End
		{
			
			#Clean Variables
			Remove-Variable session -Force -ErrorAction SilentlyContinue
			Remove-Variable devDetail -Force -ErrorAction SilentlyContinue
			Remove-Variable hash -Force -ErrorAction SilentlyContinue
		}
	}
	#endregion Function Get-HardwareHash
	
	#region Function Run-BatteryCheckRunSpace
	Function Run-BatteryCheckRunSpace
	{
		Begin
		{
			#Create-Log -Type 1 -Message "Checking If the Device is plugged-in to a Power Cable."
			
			#Initialize local Function variables
			#$mainUI.richTextBox1.Document.Blocks.Clear()
		}
		Process
		{
			If ($Global:validateBattery -eq $False)
			{
				Add-JobTracker -Name "askBattery" -JobScript {
					$battery = Get-CimInstance -ClassName CIM_Battery
					$powerStatus = $battery.BatteryStatus
					$powerStatus
				} -UpdateScript { Start-Sleep -Milliseconds 50 } -CompletedScript {
					Param ($Job)
					$powerStatus = Receive-Job -Job $Job
					
					If ($powerStatus -like "*1*")
					{
						#Output information to User
						#Define new flowDocument and Paragraph
						$flowDocument = $mainUI.richTextBox1.Document
						$paragraph = New-Object System.Windows.Documents.Paragraph
						$runObj = New-Object System.Windows.Documents.Run
						
						#Define Paragraph 1
						$paragraph.FontFamily = "Open Sans"
						$paragraph.FontSize = '12'
						$paragraph.Inlines.Add([System.Windows.Documents.Run]("This Device is "))
						$runObj.FontWeight = "Bold"
						$runObj.Text = "NOT YET"
						$paragraph.Inlines.Add($runObj)
						$paragraph.Inlines.Add([System.Windows.Documents.Run](" plugged-in to the Power Cable! Please Plug it in.`r`n"))
						$flowDocument.Blocks.Add($paragraph)
						$mainUI.richTextBox1.Dispatcher.Invoke(
							[Action]{ $mainUI.richTextBox1.Document = $flowDocument })
						$Global:validateBattery = $False
					}
					Else
					{
						$Global:validateBattery = $True
					}
				}
			}
		}
		End
		{
			
		}
	}
	#endregion Function Run-BatteryCheckRunSpace
	
	#region Function Disable-EncryptionRunspace
	Function Disable-EncryptionRunspace
	{
        <#
.SYNOPSIS
Checks if the System Disk is encrypted and proceeds to unencrypt it, outputing a message every 10 seconds.
.INPUTS
None.
.OUTPUTS
None.
.NOTES
This is an internal script function and should typically not be called directly.
.LINK
#ToBeDone
.COMPONENT
Microsoft Windows WMI
.FUNCTIONALITY
Checks if the System Disk is encrypted and proceeds to unencrypt it, outputing a message every 10 seconds.
#>
		Begin
		{
		}
		Process
		{
			$fullBitlockerStatus = Get-BitLockerVolume
			
			#For each Disk in the Device
			Foreach ($volume in $fullBitlockerStatus)
			{
				
				#If the Disk is the System Disk and is encrypted
				If ($volume.VolumeType -like "OperatingSystem")
				{
					#Set System Disk
					$mountPoint = $volume.MountPoint
					
					Add-JobTracker -Name "checkEncryption" -ArgumentList ($mountPoint) -JobScript {
						param ($mountPoint)
						
						#Get Encryption Information
						$encryptionStatusRunspace = Get-BitLockerVolume $mountPoint
						$encryptionPercentageRunspace = $encryptionStatusRunspace.EncryptionPercentage
						
						#Output the Encryption State
						$encryptionPercentageRunspace
						
					} -UpdateScript { Start-Sleep -Milliseconds 50 } -CompletedScript {
						Param ($Job)
						$results = Receive-Job -Job $Job
						$results | Out-File "C:\batteryresults.txt" -Append
						[int]$result = $results -As [int]
						If ($results -ne "0")
						{
							#Ouput information to User
							$flowDocument = $mainUI.richTextBox1.Document
							$paragraph = New-Object System.Windows.Documents.Paragraph
							$runObj = New-Object System.Windows.Documents.Run
							
							#Define Paragraph 1
							$paragraph.FontFamily = "Open Sans"
							$paragraph.FontSize = '12'
							$runObj.FontWeight = "Bold"
							$runObj.Text = "$result"
							$paragraph.Inlines.Add($runObj)
							$paragraph.Inlines.Add([System.Windows.Documents.Run]("% remaining. Please wait. . .`r`n"))
							$flowDocument.Blocks.Add($paragraph)
							$mainUI.richTextBox1.Dispatcher.Invoke(
								[Action]{ $mainUI.richTextBox1.Document = $flowDocument })
						}
						ElseIf ($result -eq "0")
						{
							$Global:validateEncryption = $True
						}
					}
				}
				Else
				{
					#No System Disk was encrypted
					Create-Log -Type 1 -Message "Operating System Disk is not encrypted."
					
					$Global:validateEncryption = $True
					
					Validate-WinRE
				}
			}
		}
		End { }
	}
	#endregion Function Disable-EncryptionRunspace
	
	#region Function Validate-WinRE
	Function Validate-WinRE
	{
        <#
.SYNOPSIS
Checks if the System Windows Recovery is Disabled and proceeds to Enable it if necessary.
.INPUTS
None.
.OUTPUTS
None.
.NOTES
This is an internal script function and should typically not be called directly.
.LINK
#ToBeDone
.COMPONENT
Microsoft Windows WMI
.FUNCTIONALITY
Checks if the System Windows Recovery is Disabled and proceeds to Enable it if necessary.
#>
		Begin
		{
			
			Create-Log -Type 1 -Message "Checking Windows Recovery"
			
			#Clean possible old check remains
			If (Test-Path "C:\ProgramData\WinREStatus.txt")
			{
				Remove-Item "C:\ProgramData\WinREStatus.txt" -Force -ErrorAction SilentlyContinue
			}
		}
		Process
		{
			Add-JobTracker -Name "checkWinRE" -JobScript {
				
				#Get Windows Recovery Information and store it in a text file
				Start-Process reagentc -ArgumentList "/info" -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Wait -RedirectStandardOutput "C:\ProgramData\WinREStatus.txt"
				Start-Sleep -Seconds 1
				
				#Get the 4th line of the Information we stored in a text file
				[string]$winREstatus = (Get-Content "C:\ProgramData\WinREStatus.txt")[3]
				$winREstatus
				
			} -UpdateScript { Start-Sleep -Milliseconds 50 } -CompletedScript {
				Param ($Job)
				$results = Receive-Job -Job $Job
				[string]$winREstatus = $results
				
				#If Windows Recovery is Disabled
				If ($winREstatus -like "*Disabled*")
				{
					Create-Log -Type 1 -Message "Windows Recovery is Disabled, the setup will attempt to enable it."
					Try
					{
						#Try to Enable Windows Recovey
						Start-Process reagentc -ArgumentList "/enable" -ErrorAction SilentlyContinue -Wait
						
						#Windows Recovery was Enabled
						[bool]$Global:verifyWinRE = $True
						
						Create-Log -Type 2 -Message "Windows Recovery is now Enabled."
						Get-DeviceRegistration
					}
					Catch
					{
						#Catch the Error we got when Enabling Windows Recovery and Log it
						Create-Log -Type 3 -Message "Failed to Enabled Windows Recovery."
						$privateLogMessage = "StatusCode: " + $_.Exception.Response.StatusCode.value
						Create-Log -Type 3 -Message $privateLogMessage
						$privateLogMessage = "StatusDescription: " + $_.Exception.Response.StatusDescription
						Create-Log -Type 3 -Message $privateLogMessage
						Set-ErrorScreen
					}
				}
				Else
				{
					#Windows Recovery was already Enabled
					Create-Log -Type 2 -Message "Windows Recovery is Enabled."
					[bool]$Global:verifyWinRE = $True
					Get-DeviceRegistration
				}
			}
		}
		End
		{
			#Remove the text file with Windows Recovery Information
			Remove-Item "C:\ProgramData\WinREStatus.txt" -Force -ErrorAction SilentlyContinue
		}
	}
	#endregion Function Validate-WinRE
	
	#region Function Get-DeviceRegistration
	Function Get-DeviceRegistration
	{
    <#
.SYNOPSIS
Checks if a specified serialNumber is already registeredin Intune.
.INPUTS
None.
.OUTPUTS
None.
.NOTES
This is an internal script function and should typically not be called directly.
.LINK
#ToBeDone
.COMPONENT
Microsoft GRAPH API
.FUNCTIONALITY
Registers the Device in Intune, Applies a specific Deployment Profile if avaliable and assigns device to user if requested.
#>
		Begin
		{
			
			Create-Log -Type 1 -Message "Checking Intune Device Registration."
			
			
			#Initialize local Variables
			[string]$serial = $Global:serialNumber.TrimEnd(" ")
			If ($serial -like "VMware*")
			{
				$serialVMWare = $serial.split(" ")
				$stringToSearch = $serialVMWare[0]
			}
		}
		Process
		{
			Create-Log -Type 1 -Message "Checking If Device was previously registered in Intune."
			$authregister = $Global:authHeader.Authorization
			#Define Code to be executed in paralel runspace
			If ($serial -notlike "VMware*")
			{
				Add-JobTracker -Name "getNonVMWare" -ArgumentList ($serial, $authregister) -JobScript {
					param ($serial,
						$authregister)
					
					#Define variables
					$serialNumber = $serial
					$header = $authregister
					$privateToken = @{
						'Content-Type'  = 'application\json'
						'Authorization' = $header
					}
					
					#Create a result Object
					$psObject = New-Object System.Management.Automation.PSObject
					
					#Define Query URL
					[string]$autopilotDeviceURL = "https://graph.microsoft.com/beta/deviceManagement/managedDevices`?`$filter=serialNumber eq '$serialNumber'"
					
					Try
					{
						$autoPilotDeviceInfo = Invoke-RestMethod -Uri $autopilotDeviceURL -Method GET -Headers $privateToken -UseBasicParsing -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
						$autopilotDevice = $autoPilotDeviceInfo.value
						
						#Populate result Object
						If ($finalDevice.serialNumber)
						{
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name serialNumber -Value $finalDevice.serialNumber
						}
						Else
						{
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name serialNumber -Value 'Null'
						}
						Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name AzureADDeviceId -Value $finalDevice.azureADDeviceId
						Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name azureActiveDirectoryDeviceId -Value $finalDevice.azureActiveDirectoryDeviceId
						Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name deviceID -Value $finalDevice.id
					}
					Catch
					{
						Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name serialNumber -Value 'False'
					}
					$psObject
				} -UpdateScript { Start-Sleep -Milliseconds 50 } -CompletedScript {
					Param ($Job)
					$results = Receive-Job -Job $Job
					#Treat the Output
					#If the Query outcome is nothing it means the Device was not previously registered
					If ($results.serialNumber -eq 'Null')
					{
						$Global:isRegistered = $False
						Register-Device
					}
					ElseIf (($results.serialNumber -ne 'Null') -and ($results.serialNumber -ne 'False'))
					{
						$Global:isRegistered = $True
						$Global:finalDeviceID = $results.deviceID
						Change-DeviceProfile
					}
				}
			}
			ElseIf ($serial -like "VMware*")
			{
				Add-JobTracker -Name "getVMWare" -ArgumentList ($stringToSearch, $serial, $authregister) -JobScript {
					param ($stringToSearch,
						$serial,
						$authregister)
					
					#Define variables
					$deviceSerial = $stringToSearch
					$deviceSerialSpaces = $serial
					$header = $authregister
					$privateToken = @{
						'Content-Type'  = 'application\json'
						'Authorization' = $header
					}
					
					#Create a result Object
					$psObject = New-Object System.Management.Automation.PSObject
					
					#Define Query URL
					[string]$autopilotDeviceURL = "https://graph.microsoft.com/beta/deviceManagement/windowsAutopilotDeviceIdentities?`$filter=contains(serialNumber,'$($deviceSerial)')"
					
					Try
					{
						$autoPilotDevicesInfo = Invoke-RestMethod -Uri $autopilotDeviceURL -Method GET -Headers $privateToken -UseBasicParsing -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
						$autopilotDevices = $autoPilotDevicesInfo.value
						$devicesNextLink = $Null
						$devicesNextLink = $autopilotDevices.'@odata.nextLink'
						If ($Null -ne $devicesNextLink)
						{
							$deviceAllResults += $autopilotDevices
							$devicesPages = $devicesNextLink
							While ($devicesPages -notlike $Null)
							{
								$autopilotDevices = $Null
								$devicesAdditional = Invoke-RestMethod -Uri $devicesPages -Headers $privateToken -Method Get -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
								$autopilotDevices = $devicesAdditional.value
								$deviceAllResults += $autopilotDevices
								If ($devicesPages)
								{
									$devicesPages = $Null
									$devicesPages = $devicesAdditional."@odata.nextLink"
								}
							}
							$finalDevice = $deviceAllResults | where { $_.serialNumber -eq "$($deviceSerialSpaces)" }
						}
						Else
						{
							$finalDevice = $autopilotDevices
						}
						
						#Populate result Object
						If ($finalDevice.serialNumber)
						{
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name serialNumber -Value $finalDevice.serialNumber
						}
						Else
						{
							Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name serialNumber -Value 'Null'
						}
						Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name AzureADDeviceId -Value $finalDevice.azureADDeviceId
						Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name azureActiveDirectoryDeviceId -Value $finalDevice.azureActiveDirectoryDeviceId
						Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name deviceID -Value $finalDevice.id
					}
					Catch
					{
						Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name serialNumber -Value 'False'
					}
					$psObject
				} -UpdateScript { Start-Sleep -Milliseconds 50 } -CompletedScript {
					Param ($Job)
					$results = Receive-Job -Job $Job
					
					#Treat the Output
					#If the Query outcome is nothing it means the Device was not previously registered
					If ($results.serialNumber -eq 'Null')
					{
						$Global:isRegistered = $False
						Register-Device
					}
					ElseIf (($results.serialNumber -ne 'Null') -and ($results.serialNumber -ne 'False'))
					{
						$Global:isRegistered = $True
						$Global:finalDeviceID = $results.deviceID
						Change-DeviceProfile
					}
				}
			}
		}
		End { }
	}
	#endregion Function Get-DeviceRegistration
	
	#region Function Register-Device
	Function Register-Device
	{
		Begin
	{
			$Global:scriptAction = 'Register Device'
			Create-Log -Type 1 -Message "This Device was not previously registered in Intune."
		}
		Process
		{
			If ($Global:groupTag -ne $Null)
			{
				Create-Log -Type 1 -Message "Registering the Device with GroupTag: $Global:groupTag."
			}
			Else
			{
				Create-Log -Type 1 -Message "Registering the Device without GroupTag."
			}
			
			#Generate a Hardwarehash to register the Device
			Get-HardwareHash
			
			#If Hardware Hash was generated successfully
			If ($Null -ne $Global:deviceHardwareHash)
			{
				If (!($Global:groupTag))
				{
					$Global:groupTag = $Null
				}
				
				#Pass Token
				$lastStepHeader = $Global:authHeader.Authorization
				If ($False -eq $Global:assignDeviceToUser)
				{
					Add-JobTracker -Name "noAssignment" -ArgumentList ($serial, $lastStepHeader, $Global:groupTag, $Global:deviceHardwareHash, $Global:Owner) -JobScript {
						Param ($serial,
							$lastStepHeader,
							$Global:groupTag,
							$Global:deviceHardwareHash,
							$Global:Owner)
						
						#Define variables
						$deviceSerial = $serial
						$header = $lastStepHeader
						$deviceGroupTag = $Global:groupTag
						$deviceHash = $Global:deviceHardwareHash
						$deviceUser = $Global:Owner
						$privateToken = @{
							'Content-Type'  = 'application\json'
							'Authorization' = $header
						}
						
						#Define the registration JSON file
						$autoPilotJSONrequest = @"
                            {
                                "@odata.type": "#microsoft.graph.importedWindowsAutopilotDeviceIdentity",
                                "orderIdentifier": "",
                                "serialNumber": "$deviceSerial",
                                "groupTag": "$deviceGroupTag",
                                "productKey": "",
                                "hardwareIdentifier": "$deviceHash",
                                "state": {
                                    "@odata.type": "microsoft.graph.importedWindowsAutopilotDeviceIdentityState",
                                    "deviceImportStatus": "pending",
                                    "deviceRegistrationId": "",
                                    "deviceErrorCode": 0,
                                    "deviceErrorName": ""
                                }
                            }
"@
						
						#Define the registration URL
						$autoPilotPostURL = "https://graph.microsoft.com/beta/deviceManagement/importedWindowsAutopilotDeviceIdentities"
						
						#Register the Device
						Try
						{
							$groupTagApply = Invoke-RestMethod -Uri $AutoPilotPostURL -Method POST -Body $autoPilotJSONrequest -ContentType 'application/json' -Headers $privateToken -UseBasicParsing -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
							$registration = "True"
						}
						Catch
						{
							#Log Error Message
							$registration = "False"
						}
						$registration
					} -UpdateScript { Start-Sleep -Milliseconds 50 } -CompletedScript {
						Param ($Job)
						$results = Receive-Job -Job $Job
						
						#Treat Results
						If (($results -ne 'False') -and ($results -ne $Null))
						{
							$Global:verifyApplyGroupTag = $True
							Create-Log -Type 2 -Message "Device successfully registered in Intune."
							
							#Define new flowDocument and Paragraph
							$flowDocument = New-Object System.Windows.Documents.FlowDocument
							$paragraph = New-Object System.Windows.Documents.Paragraph
							
							#Define Paragraph 1
							$paragraph.FontFamily = "Open Sans"
							$paragraph.FontSize = '12'
							$paragraph.Inlines.Add([System.Windows.Documents.Run]("Device successfully registered in Intune.`r`n"))
							$flowDocument.Blocks.Add($paragraph)
							$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
							Prepare-DeviceWipe
						}
						Else
						{
							#Log Error Message
							Create-Log -Type 3 -Message "Unable to register this Device in Intune."
							$mainUI.richTextBox1.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document.Blocks.Clear() })
							#Define new flowDocument and Paragraph
							$flowDocument = New-Object System.Windows.Documents.FlowDocument
							$paragraph = New-Object System.Windows.Documents.Paragraph
							
							#Define Paragraph 1
							$paragraph.FontFamily = "Open Sans"
							$paragraph.FontSize = '12'
							$paragraph.Inlines.Add([System.Windows.Documents.Run]("Setup failed to register this Device in Intune.`r`n"))
							$flowDocument.Blocks.Add($paragraph)
							$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
							Set-ErrorScreen
						}
					}
				}
				ElseIf ($True -eq $Global:assignDeviceToUser)
				{
					Add-JobTracker -Name "noAssignment" -ArgumentList ($serial, $lastStepHeader, $Global:groupTag, $Global:deviceHardwareHash, $Global:Owner) -JobScript {
						Param ($serial,
							$lastStepHeader,
							$Global:groupTag,
							$Global:deviceHardwareHash,
							$Global:Owner)
						
						#Define variables
						$deviceSerial = $serial
						$header = $lastStepHeader
						$deviceGroupTag = $Global:groupTag
						$deviceHash = $Global:deviceHardwareHash
						$deviceUser = $Global:Owner
						$privateToken = @{
							'Content-Type'  = 'application\json'
							'Authorization' = $header
						}
						
						#Define the registration JSON file
						$autoPilotJSONrequest = @"
                            {
                                "@odata.type": "#microsoft.graph.importedWindowsAutopilotDeviceIdentity",
                                "orderIdentifier": "",
                                "serialNumber": "$deviceSerial",
                                "groupTag": "$deviceGroupTag",
                                "productKey": "",
                                "hardwareIdentifier": "$deviceHash",
                                "state": {
                                    "@odata.type": "microsoft.graph.importedWindowsAutopilotDeviceIdentityState",
                                    "deviceImportStatus": "pending",
                                    "deviceRegistrationId": "",
                                    "deviceErrorCode": 0,
                                    "deviceErrorName": ""
                                },
								"assignedUserPrincipalName": "$deviceUser"
                            }
"@
						
						#Define the registration URL
						$autoPilotPostURL = "https://graph.microsoft.com/beta/deviceManagement/importedWindowsAutopilotDeviceIdentities"
						
						#Register the Device
						Try
						{
							$groupTagApply = Invoke-RestMethod -Uri $AutoPilotPostURL -Method POST -Body $autoPilotJSONrequest -ContentType 'application/json' -Headers $privateToken -UseBasicParsing -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
							$registration = "True"
						}
						Catch
						{
							#Log Error Message
							$registration = "False"
						}
						$registration
					} -UpdateScript { Start-Sleep -Milliseconds 50 } -CompletedScript {
						Param ($Job)
						$results = Receive-Job -Job $Job
						
						#Treat Results
						If (($results -ne 'False') -and ($results -ne $Null))
						{
							$Global:verifyApplyGroupTag = $True
							Create-Log -Type 2 -Message "Device successfully registered in Intune."
							
							#Define new flowDocument and Paragraph
							$flowDocument = New-Object System.Windows.Documents.FlowDocument
							$paragraph = New-Object System.Windows.Documents.Paragraph
							
							#Define Paragraph 1
							$paragraph.FontFamily = "Open Sans"
							$paragraph.FontSize = '12'
							$paragraph.Inlines.Add([System.Windows.Documents.Run]("Device successfully registered in Intune.`r`n"))
							$flowDocument.Blocks.Add($paragraph)
							$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
							Prepare-DeviceWipe
						}
						Else
						{
							#Log Error Message
							Create-Log -Type 3 -Message "Unable to register this Device in Intune."
							$mainUI.richTextBox1.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document.Blocks.Clear() })
							#Define new flowDocument and Paragraph
							$flowDocument = New-Object System.Windows.Documents.FlowDocument
							$paragraph = New-Object System.Windows.Documents.Paragraph
							
							#Define Paragraph 1
							$paragraph.FontFamily = "Open Sans"
							$paragraph.FontSize = '12'
							$paragraph.Inlines.Add([System.Windows.Documents.Run]("Setup failed to register in Intune.`r`n"))
							$flowDocument.Blocks.Add($paragraph)
							$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
							Set-ErrorScreen
						}
					}
				}
			}
			
			#Else If setup was unable to generate a Hardware Hash
			Else
			{
				#Log Error Message
				Create-Log -Type 3 -Message "Error generating a Hardware Hash or Hardware Hash not found."
				$mainUI.richTextBox1.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document.Blocks.Clear() })
				#Define new flowDocument and Paragraph
				$flowDocument = New-Object System.Windows.Documents.FlowDocument
				$paragraph = New-Object System.Windows.Documents.Paragraph
				
				#Define Paragraph 1
				$paragraph.FontFamily = "Open Sans"
				$paragraph.FontSize = '12'
				$paragraph.Inlines.Add([System.Windows.Documents.Run]("Error generating a Hardware Hash or Hardware Hash not found.`r`n"))
				$flowDocument.Blocks.Add($paragraph)
				$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
				Set-ErrorScreen
			}
		}
		End { }
	}
	#endregion Function Register-Device
	
	#region Function Change-DeviceProfile
	Function Change-DeviceProfile
	{
		Begin
	{
			$Global:scriptAction = 'Reassign Device'
			Create-Log -Type 1 -Message "This Device is already registered in Intune."
			If ($Global:groupTag -ne $Null)
			{
				Create-Log -Type 1 -Message "Re-assigning Device through GroupTag: $Global:groupTag."
			}
			Else
			{
				Create-Log -Type 1 -Message "Re-assigning Device without GroupTag."
			}
			$authregister = $Global:authHeader.Authorization
		}
		Process
		{
			Add-JobTracker -Name "reAssignDevice" -ArgumentList ($authregister, $Global:finalDeviceID, $Global:groupTag) -JobScript {
				Param ($authregister,
					$Global:finalDeviceID,
					$Global:groupTag)
				
				#Define Variables
				$header = $authregister
				$applyAutopilotID = $Global:finalDeviceID
				$applyGroupTag = $Global:groupTag
				$privateToken = @{
					'Content-Type'  = 'application\json'
					'Authorization' = $header
				}
				
				#Define the Apply GroupTag URL
				$groupTagPostURL = "https://graph.microsoft.com/beta/deviceManagement/windowsAutopilotDeviceIdentities/$applyAutopilotID/updateDeviceProperties"
				
				#Define the Apply GroupTag Post Body
				$groupTagBody = @{
					groupTag = $applyGroupTag
				}
				$groupTagBody = $groupTagBody | ConvertTo-Json
				
				Try
				{
					$groupTagApply = Invoke-RestMethod -Uri $groupTagPostURL -Method POST -Body $groupTagBody -ContentType 'application/json' -Headers $privateToken -UseBasicParsing -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
					$registration = 'True'
				}
				Catch
				{
					$registration = 'False'
				}
				$registration
				
			} -UpdateScript { Start-Sleep -Milliseconds 50 } -CompletedScript {
				Param ($Job)
				$results = Receive-Job -Job $Job
				
				#Register Output
				[string]$applySuccessful = $results
				
				If ($applySuccessful -like "False")
				{
					
					#Log Error Message
					Create-Log -Type 3 -Message "Setup failed to re-assigned the Device in Intune."
					$mainUI.richTextBox1.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document.Blocks.Clear() })
					#Define new flowDocument and Paragraph
					$flowDocument = New-Object System.Windows.Documents.FlowDocument
					$paragraph = New-Object System.Windows.Documents.Paragraph
					$runObj = New-Object System.Windows.Documents.Run
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]("Setup failed to re-assigned the Device in Intune.`r`n"))
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
					Set-ErrorScreen
				}
				Else
				{
					Create-Log -Type 2 -Message "Setup successfully re-assigned the Device in Intune."
					
					#Define new flowDocument and Paragraph
					$flowDocument = New-Object System.Windows.Documents.FlowDocument
					$paragraph = New-Object System.Windows.Documents.Paragraph
					$runObj = New-Object System.Windows.Documents.Run
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]("Setup successfully re-assigned the Device in Intune.`r`n"))
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
					If ($False -eq $Global:assignDeviceToUser)
					{
						Prepare-DeviceWipe
					}
					ElseIf ($True -eq $Global:assignDeviceToUser)
					{
						Assign-Device
					}
				}
			}
		}
		End { }
	}
	#endregion Function Change-DeviceProfile
	
	#region Function Prepare-DeviceWipe
	Function Prepare-DeviceWipe
	{
    <#
.SYNOPSIS
Creates a Powershell Script file in ;C:\ProgramData' with a CSP Device Wipe Method Call, and confirms its creation.
.INPUTS
None.
.OUTPUTS
Boolen.
.NOTES
This is an internal script function and should typically not be called directly.
.LINK
#ToBeDone
.COMPONENT
Microsoft Windows WMI
.FUNCTIONALITY
Creates a Powershell Script file in ;C:\ProgramData' with a CSP Device Wipe Method Call, and confirms its creation.
#>
		$CSPWipeMethod = @'
$namespaceName = "root\cimv2\mdm\dmmap"
$className = "MDM_RemoteWipe"
$methodName = "doWipeProtectedMethod"
$session = New-CimSession
$params = New-Object Microsoft.Management.Infrastructure.CimMethodParametersCollection
$param = [Microsoft.Management.Infrastructure.CimMethodParameter]::Create("param", "", "String", "In")
$params.Add($param)
try
{
$instance = Get-CimInstance -Namespace $namespaceName -ClassName $className -Filter "ParentID='./Vendor/MSFT' and InstanceID='RemoteWipe'"
$session.InvokeMethod($namespaceName, $instance, $methodName, $params)
}
catch [Exception]
{
write-host $_ | out-string
}
'@
		#Save the $CSPWipeMethod Variable to a Powershell .ps1 File
		Out-File -FilePath "C:\ProgramData\CSPWipeMethod.ps1" -Encoding unicode -Force -InputObject $CSPWipeMethod -Confirm:$false -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
		If (Test-Path "C:\ProgramData\CSPWipeMethod.ps1")
		{
			Create-Log -Type 2 -Message "Setup created the Autopilot CSPWipe.ps1 file."
			Begin-DeviceWipe
		}
		Else
		{
			Create-Log -Type 3 -Message "Setup failed to create the Autopilot CSPWipe.ps1 file."
			Set-ErrorScreen
		}
	}
	#endregion Function Prepare-DeviceWipe
	
	#region Function Begin-DeviceWipe
	Function Begin-DeviceWipe
	{
		Begin { }
		Process
		{
			
			#Fetch the current Time/Date, add 2 minutes to it and store it in a variable
			$nowTime = [DateTime]::Now.AddMinutes(2)
			
			#Convert the previously stored Time/Date to a readable format by Task Scheduler
			$convertedTime = $nowTime.ToString("HH:mm")
			
			#Create a Task Scheduler to run the $CSPWipeMethod Powershell Script once, with SYSTEM Account and within the next 2 minutes
			schtasks.exe /create /ru system /sc MINUTE /rl highest /tn AutoPilot /tr "C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe -ExecutionPolicy Bypass -file 'C:\ProgramData\CSPWipeMethod.ps1'" /st $ConvertedTime /F
			Start-Sleep -Seconds 2
			$ScheduledTask = Get-ScheduledTask -TaskName "AutoPilot"
			
			If ($ScheduledTask)
			{
				Create-Log -Type 2 -Message "Scheduled Task registered. Device will RESTART within 2 minutes."
				
				#Define new flowDocument and Paragraph
				$flowDocument = New-Object System.Windows.Documents.FlowDocument
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				
				#Define Paragraph 1
				$paragraph.FontFamily = "Open Sans"
				$paragraph.FontSize = '12'
				$paragraph.Inlines.Add([System.Windows.Documents.Run]("Device Wipe - "))
				
				$runObj.FontWeight = "Bold"
				$runObj.Text = "READY"
				$paragraph.Inlines.Add($runObj)
				$paragraph.Inlines.Add([System.Windows.Documents.Run](".`r`nYour Device will RESTART within 2 minutes. . .`r`n"))
			$paragraph.Inlines.Add([System.Windows.Documents.Run]("The setup will automatically exit in 10 seconds. Press OK to exit now.`r`n"))
				$flowDocument.Blocks.Add($paragraph)
				$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
				$Global:autopilotSuccess = 'Success'
				
				#Fade in Button
				$Global:scriptPhase = 99
				$uri = new-object system.uri("$sourceLocation\sources\button2.png")
				$imagesource = new-object System.Windows.Media.Imaging.BitmapImage $uri
				$imagebrush = new-object System.Windows.Media.ImageBrush $imagesource
				$imagebrush.Stretch = "UniformToFill"
				$mainUI.button1.Background = $imagebrush
				$mainUI.button1.Content = 'OK'
				$fadeInAnimation3.Add_Completed({
						$mainUI.backbutton1.Opacity = 1
					})
				$mainUI.backbutton1.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeInAnimation)
				$fadeInAnimation3.Add_Completed({
						$mainUI.button1.Opacity = 1
						$mainUI.button1.IsEnabled = $True
					
				})
				$mainUI.button1.IsEnabled = $True
				$mainUI.button1.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeInAnimation)
				
				Upload-ToLogAnalytics
				$createFile = Create-AzureLogFile -storageAccount $SA -AzureSASToken $SAAccessToken -AzureStorageToken $SAToken -AzureStorageFile $Global:logFile
				$Global:scriptPhase = 99
				$Global:jobCount = 0
				$Global:dispatcherExit.Start()
			}
			Else
			{
				Create-Log -Type 3 -Message "Setup failed to register the Autopilot Scheduled Task."
				
				#Define new flowDocument and Paragraph
				$flowDocument = New-Object System.Windows.Documents.FlowDocument
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				$mainUI.richTextBox1.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document.Blocks.Clear() })
				#Define Paragraph 1
				$paragraph.FontFamily = "Open Sans"
				$paragraph.FontSize = '12'
				$paragraph.Inlines.Add([System.Windows.Documents.Run]("Device Wipe - "))
				
				$runObj.FontWeight = "Bold"
				$runObj.Text = "NOT READY"
				$paragraph.Inlines.Add($runObj)
				$paragraph.Inlines.Add([System.Windows.Documents.Run](". Setup failed to prepare the Device Wipe.`r`n"))
				$flowDocument.Blocks.Add($paragraph)
				$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
				Set-ErrorScreen
			}
		}
		End { }
	}
	#endregion Function Begin-DeviceWipe
	
	#region Assign-Device
	Function Assign-Device
	{
		Begin
		{
			Create-Log -Type 1 -Message "Re-assigning Device to User: $Global:Owner"
			
			#Define variables
			$authregister = $Global:authHeader.Authorization
		}
		Process
		{
			Add-JobTracker -Name "reassignUser" -ArgumentList ($authregister, $Global:finalDeviceID, $Global:Owner) -JobScript {
				Param ($authregister,
					$Global:finalDeviceID,
					$Global:Owner)
				
				#Define variables
				$header = $authregister
				[string]$internalDeviceID = $Global:finalDeviceID
				[string]$internalUserID = $Global:Owner
				$privateToken = @{
					'Content-Type'  = 'application\json'
					'Authorization' = $header
				}
				
				#Define URIs
				[string]$uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices('$internalDeviceID')/users/`$ref"
				[string]$userUri = "https://graph.microsoft.com/beta/users/" + $internalUserID
				$id = "@odata.id"
				$JSON = @{ $id = "$userUri" } | ConvertTo-Json -Compress
				
				Try
				{
					Invoke-RestMethod -Uri $uri -Headers $privateToken -Method Post -Body $JSON -ContentType "application/json" -UseBasicParsing -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
					$assignedToUser = 'True'
				}
				Catch
				{
					$assignedToUser = 'False'
				}
				$assignedToUser
			} -UpdateScript { Start-Sleep -Milliseconds 50 } -CompletedScript {
				Param ($Job)
				$results = Receive-Job -Job $Job
				
				#Register Output
				[string]$applySuccessful = $results
				
				If ($applySuccessful -like "False")
				{
					
					#Log Error Message
					Create-Log -Type 3 -Message "Setup failed to re-assigned the Device in Intune."
					$mainUI.richTextBox1.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document.Blocks.Clear() })
					#Define new flowDocument and Paragraph
					$flowDocument = New-Object System.Windows.Documents.FlowDocument
					$paragraph = New-Object System.Windows.Documents.Paragraph
					$runObj = New-Object System.Windows.Documents.Run
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]("Setup failed to re-assigned the Device to User: $Global:Owner.`r`n"))
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
					Set-ErrorScreen
				}
				Else
				{
					Create-Log -Type 2 -Message "Setup successfully re-assigned the Device to User: $Global:Owner."
					
					#Define new flowDocument and Paragraph
					$flowDocument = New-Object System.Windows.Documents.FlowDocument
					$paragraph = New-Object System.Windows.Documents.Paragraph
					$runObj = New-Object System.Windows.Documents.Run
					
					#Define Paragraph 1
					$paragraph.FontFamily = "Open Sans"
					$paragraph.FontSize = '12'
					$paragraph.Inlines.Add([System.Windows.Documents.Run]("Setup successfully re-assigned the Device to User: $Global:Owner`r`n"))
					$flowDocument.Blocks.Add($paragraph)
					$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
					Prepare-DeviceWipe
				}
			}
		}
		End { }
	}
	#endregion Assign-Device
	
	#region Function FinalValidation
	Function FinalValidation
	{
    <#
.SYNOPSIS
Validates if the TPM version, OS Build, OS Version, CPU Architecture/Generation and SecureBoot are compatible with Intune and Windows 11.
.INPUTS
None.
.OUTPUTS
Boolean.
.NOTES
This is an internal script function and should typically not be called directly.
.LINK
#ToBeDone
.COMPONENT
Microsoft GRAPH API
.FUNCTIONALITY
Validates if the Device Hardware, OS Build and OS Version are compatible with Intune.
#>
		Begin { }
		Process
		{
			If (($Global:booltpmVersion) -and ($Global:validation_UserInfo) -and ($Global:boolOSversion) -and ($Global:boolOSbuild) -and ($Global:boolCPU) -and ($Global:boolMemory) -and ($Global:boolSecureBoot) -and ($Global:validateCloudConnection))
			{
				$Global:scriptPhase = 6
				
				#Animate Controls out
				$fadeOutAnimation2.Add_Completed({
						#$mainUI.labelUser.Visibility = [System.Windows.Visibility]::Hidden
						$mainUI.label1.Opacity = 0
						
					})
				$mainUI.label1.BeginAnimation([System.Windows.Controls.Label]::OpacityProperty, $fadeOutAnimation2)
				$fadeOutAnimation2.Add_Completed({
						$mainUI.richTextBox2.Visibility = [System.Windows.Visibility]::Hidden
						$mainUI.border4.Opacity = 0
						$mainUI.richTextBox2.Opacity = 0
						$mainUI.button1.Opacity = 1
						
					})
				$mainUI.border4.BeginAnimation([System.Windows.Controls.Border]::OpacityProperty, $fadeOutAnimation2)
				#Define new flowDocument and Paragraph
				
				$flowDocument = $mainUI.richTextBox1.Document
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				#Define Paragraph 1
				$paragraph.FontFamily = "Open Sans"
				$paragraph.FontSize = '12'
				$paragraph.Inlines.Add([System.Windows.Documents.Run]("This Device "))
				$runObj.FontWeight = 'Bold'
				$runObj.Text = 'PASSED'
				$paragraph.Inlines.Add($runObj)
				Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
				$runObj = New-Object System.Windows.Documents.Run
				$paragraph.Inlines.Add([System.Windows.Documents.Run](" all Setup requirements and is "))
				$runObj.FontWeight = 'Bold'
				$runObj.Text = 'READY'
				$paragraph.Inlines.Add($runObj)
				Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
				$runObj = New-Object System.Windows.Documents.Run
				$paragraph.Inlines.Add([System.Windows.Documents.Run](" to be Autopiloted.`r`n"))
				$paragraph.Inlines.Add([System.Windows.Documents.Run]("Press "))
				$runObj.FontWeight = 'Bold'
				$runObj.Text = 'WIPE'
				$paragraph.Inlines.Add($runObj)
				$paragraph.Inlines.Add([System.Windows.Documents.Run](" to begin onboarding this Device."))
				$flowDocument.Blocks.Add($paragraph)
				$mainUI.richTextBox1.Dispatcher.Invoke(
					[Action]{ $mainUI.richTextBox1.Document = $flowDocument; "Normal" }
				)
				
				#Change the Button                                    
				$mainUI.button1.Content = "WIPE"
				$uri = new-object system.uri("$sourceLocation\sources\button2.png")
				$imagesource = new-object System.Windows.Media.Imaging.BitmapImage $uri
				$imagebrush = new-object System.Windows.Media.ImageBrush $imagesource
				$imagebrush.Stretch = "UniformToFill"
				$mainUI.button1.Background = $imagebrush
			}
			Else
			{
				$Global:scriptPhase = 99
				
				#Define new flowDocument and Paragraph
				$flowDocument = $mainUI.richTextBox1.Document
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				#Define Paragraph 1
				$paragraph.FontFamily = "Open Sans"
				$paragraph.FontSize = '12'
				$paragraph.Inlines.Add([System.Windows.Documents.Run]("This Device "))
				$runObj.FontWeight = 'Bold'
				$runObj.Text = 'FAILED'
				$paragraph.Inlines.Add($runObj)
				Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
				$runObj = New-Object System.Windows.Documents.Run
				$paragraph.Inlines.Add([System.Windows.Documents.Run](" some Setup requirements and is "))
				$runObj.FontWeight = 'Bold'
				$runObj.Text = 'NOT READY'
				$paragraph.Inlines.Add($runObj)
				Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
				$runObj = New-Object System.Windows.Documents.Run
				$paragraph.Inlines.Add([System.Windows.Documents.Run](" to be Autopiloted.`r`n"))
				$paragraph.Inlines.Add([System.Windows.Documents.Run]("The Setup logs will automatically be uploaded to Azure Log Analytics for further troubleshooting by $Global:externalCompanyName IT.`r`n"))
				$paragraph.Inlines.Add([System.Windows.Documents.Run]("The Setup will exit in 10 seconds. Press "))
				$runObj.FontWeight = 'Bold'
				$runObj.Text = 'OK'
				$paragraph.Inlines.Add($runObj)
				$paragraph.Inlines.Add([System.Windows.Documents.Run](" to exit now."))
				$flowDocument.Blocks.Add($paragraph)
				$mainUI.richTextBox1.Dispatcher.Invoke(
					[Action]{ $mainUI.richTextBox1.Document = $flowDocument; "Normal" }
				)
				
				#Change the Button                                    
				$mainUI.button1.Content = "OK"
				$uri = new-object system.uri("$sourceLocation\sources\button3.png")
				$imagesource = new-object System.Windows.Media.Imaging.BitmapImage $uri
				$imagebrush = new-object System.Windows.Media.ImageBrush $imagesource
				$imagebrush.Stretch = "UniformToFill"
				$mainUI.button1.Background = $imagebrush
			}
		}
		End { }
	}
	#endregion Function FinalValidation
	
	#region Function Upload-ToLogAnalytics
	Function Upload-ToLogAnalytics
	{
		Begin
		{
		Create-Log -Type 1 -Message "Uploading Data to $Global:externalCompanyName Azure Log Analytics."
			$Date = (Get-Date)
			
			$LogAnalyticsId = "b218e0d7-e51b-48a4-a3f5-f46f1b10ea1e"
			$LogAnalyticsKey = "HjV5JFPd6DSFCkwhImmyRh9c1cj/mhapHbD+uf0G2XR+E6QPLFZJkSag2hlX4UCJ1uRfLLsSucLkTrh5DbsF5A=="
			$logName = "AutopilotToolLogs"
			# You can use an optional field to specify the timestamp from the data. If the time field is not specified, Azure Monitor assumes the time is the message ingestion time
			# DO NOT DELETE THIS VARIABLE. Recommended keep this blank. 
			$Global:TimeStampField = ""
			
			#Get Computer Info
			$computerInfo = Get-CimInstance -ClassName Win32_ComputerSystem
			$model = $computerInfo.Model
			$manufacturer = $computerInfo.Manufacturer
		}
		Process
		{
			
			# Create JSON to Upload to Log Analytics
			$logInventory = New-Object System.Object
			$logInventory | Add-Member -MemberType NoteProperty -Name "User" -Value "$Global:Owner" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "CompanyName" -Value "$Global:companyName" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "GroupTag" -Value "$Global:groupTag" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "DeploymentProfile" -Value "$Global:finalProfileName" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "Serial" -Value "$Global:serialNumber" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "Manufacturer" -Value "$manufacturer" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "Model" -Value "$model" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "License" -Value "$Global:assignedLicense" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "TPMVersion" -Value "$Global:tpmVersion" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "oSversion" -Value "$Global:osVersion" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "OSBuild" -Value "$Global:osBuild" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "Memory" -Value "$($Global:stringMemory)GB" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "CPU" -Value "$Global:cpuCompatibility" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "SecureBoot" -Value "$Global:secureBootStatus" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "AssignedToUser" -Value "$Global:deviceToUser" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "ScriptAction" -Value "$Global:scriptAction" -Force
			$logInventory | Add-Member -MemberType NoteProperty -Name "AutopilotStatus" -Value "$Global:autopilotSuccess" -Force
			
			$logPayLoad = $logInventory
			$logsjson = $logPayLoad | ConvertTo-Json
			
			$bodylog = ([System.Text.Encoding]::UTF8.GetBytes($logsjson))
			$ResponseLA = Send-LogAnalyticsData -CustomerID $LogAnalyticsId -SharedKey $LogAnalyticsKey -Body2 $bodylog -LogType $LogName
			If ($ResponseLA -match "200 :")
			{
				Create-Log -Type 2 -Message "Information uploaded successfully to MEM Log Analytics."
			}
			Else
			{
				Create-Log -Type 3 -Message "Failed to upload information to MEM Log Analytics."
			}
		}
		End { }
	}
	#endregion Function Upload-ToLogAnalytics
	
	#region Function Create-AzureLogFile
	Function Create-AzureLogFile
	{
		[CmdletBinding()]
		Param (
			[Parameter(Mandatory = $true, HelpMessage = 'Azure Storage Account:')]
			[ValidateNotNullorEmpty()]
			[Alias('Storage Account')]
			[string]$storageAccount,
			[Parameter(Mandatory = $true, HelpMessage = 'Azure Storage Access Token:')]
			[ValidateNotNullorEmpty()]
			[Alias('AzureAccessToken')]
			[string]$AzureStorageToken,
			[Parameter(Mandatory = $true, HelpMessage = 'Azure Storage SAS Token:')]
			[ValidateNotNullorEmpty()]
			[Alias('SASToken')]
			[string]$AzureSASToken,
			[Parameter(Mandatory = $true, HelpMessage = 'Azure Storage Access File:')]
			[ValidateNotNullorEmpty()]
			[Alias('Azure Storage File')]
			$AzureStorageFile
		)
		
		#region Variable Declaration
		[string]$folderName = $env:COMPUTERNAME
		$filetoUpload = Get-Content $AzureStorageFile
		$filetoUploadprops = Get-Content $AzureStorageFile | measure Length -s
		$filetoUploadprops2 = Get-Content $AzureStorageFile
		[int]$filesum = $filetoUploadprops.sum
		[int]$filesze = $filetoUploadprops2.Length
		[int]$finalfilesize = $filesum + $filesze
		[int]$filesizeForUpload = $finalfilesize - 2
		[string]$filename = $AzureStorageFile | Split-Path -Leaf
		[string]$resource = "logs/Autopilot_Logs/$filename"
		[string]$method = "PUT"
		[string]$version = "2021-06-08"
		[string]$GMTTime = (Get-Date).ToUniversalTime().toString('R')
		#endregion Variable Declaration
		
		#region Header1 Declaration
		$header1 = @{ "x-ms-date" = $GMTTime }
		$header1.Add("x-ms-version", "$version")
		$header1.Add("x-ms-type", "file")
		$header1.Add("x-ms-content-type", "text/html")
		$header1.Add("x-ms-content-length", "$finalfilesize")
		#endregion Header1 Declaration
		$URI = "https://$storageAccount.file.core.windows.net/$resource" + $AzureStorageToken
		Try
		{
			$reply = Invoke-RestMethod -method $method -Uri $URI -Headers $header1 -verbose
			$reply.value
			$Result = 0
		}
		Catch
		{
			$Result = 1
		}
		If ($Result -eq 0)
		{
			$version2 = "2018-11-09"
			$AzureStorageToken2 = $AzureStorageToken -replace ('\?', '')
			[string]$GMTTime2 = (Get-Date).ToUniversalTime().toString('R')
			[string]$Range = "bytes=0-$filesizeForUpload"
			$header2 = @{
				"x-ms-version" = $version2
				"x-ms-write"   = "update"
				"x-ms-date"    = $GMTTime2
				"x-ms-range"   = "bytes=0-$filesizeForUpload"
			}
			$URI2 = "https://$storageAccount.file.core.windows.net/$resource" + "?comp=range&" + $AzureStorageToken2
			Try
			{
				$Test = Invoke-RestMethod -Uri $URI2 -Headers $header2 -Method $method -Body $filetoUpload -verbose
				$Test.value
				$Result2 = 0
			}
			Catch
			{
				$Result2 = 1
			}
		}
		Else
		{
			$Result2 = 1
			#THROW UNABLE TO CREATE FILE
		}
		Return $Result2
	}
	#endregion Function Create-AzureLogFile
	
	#region Function Set-ErrorScreen
	Function Set-ErrorScreen
	{
		$Global:scriptPhase = 99
		$Global:jobCount = 0
		#Fade in Button
		$uri = new-object system.uri("$sourceLocation\sources\button3.png")
		$imagesource = new-object System.Windows.Media.Imaging.BitmapImage $uri
		$imagebrush = new-object System.Windows.Media.ImageBrush $imagesource
		$imagebrush.Stretch = "UniformToFill"
		$mainUI.button1.Background = $imagebrush
		$mainUI.button1.Content = 'OK'
		$fadeInAnimation3.Add_Completed({
				$mainUI.backbutton1.Opacity = 1
			})
		$mainUI.backbutton1.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeInAnimation)
		$fadeInAnimation3.Add_Completed({
				$mainUI.button1.Opacity = 1
				$mainUI.button1.IsEnabled = $True
			
		})
		$mainUI.button1.IsEnabled = $True
		$mainUI.button1.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeInAnimation)
		
		$Global:autopilotSuccess = 'Failed'
		
		#Define new flowDocument and Paragraph
		$flowDocument = New-Object System.Windows.Documents.FlowDocument
		$paragraph = New-Object System.Windows.Documents.Paragraph
		$runObj = New-Object System.Windows.Documents.Run
		
		#Define Paragraph 1
		$paragraph.FontFamily = "Open Sans"
		$paragraph.FontSize = '12'
		$paragraph.Inlines.Add([System.Windows.Documents.Run]("The Autopilot Tool failed to onboard this Device.`r`n"))
		$paragraph.Inlines.Add([System.Windows.Documents.Run]("Setup Logs will autoatically be uploaded to Azure Log Analytics for further`r`ntroubleshooting by $Global:externalCompanyName IT."))
		$paragraph.Inlines.Add([System.Windows.Documents.Run]("Setup will exit in 10 seconds, press OK to exit now."))
		$flowDocument.Blocks.Add($paragraph)
		$mainUI.Window.Dispatcher.Invoke([Action]{ $mainUI.richTextBox1.Document = $flowDocument })
		Upload-ToLogAnalytics
		$createFile = Create-AzureLogFile -storageAccount $SA -AzureSASToken $SAAccessToken -AzureStorageToken $SAToken -AzureStorageFile $Global:logFile
		$Global:dispatcherExit.Start()
	}
	#endregion Function Set-ErrorScreen
	
	#endregion Main Functions
	
	#region Form Functions
	
	#region Function Button1-Click
	Function Button1-Click
	{
		If ($Global:scriptPhase -eq 1)
		{
			$Global:scriptPhase = 2
			$mainUI.richTextBox4.IsEnabled = $True
			$mainUI.richTextBox4.Visibility = [System.Windows.Visibility]::Visible
			
			#Fade out Controls
			$fadeOutAnimation.Add_Completed({
					$mainUI.richTextBox1.Opacity = 0
					$mainUI.richTextBox1.IsEnabled = $False
				})
			$mainUI.richTextBox1.BeginAnimation([System.Windows.Controls.RichTextBox]::OpacityProperty, $fadeOutAnimation)
			$fadeOutAnimation.Add_Completed({
					$mainUI.backButton1.Opacity = 0
					$mainUI.backButton1.Visibility = [System.Windows.Visibility]::Hidden
				})
			$mainUI.backButton1.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeOutAnimation)
			$fadeOutAnimation.Add_Completed({
					$mainUI.button1.Opacity = 0
					$mainUI.button1.Visibility = [System.Windows.Visibility]::Hidden
				})
			$mainUI.button1.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeOutAnimation)
			
			#Fade in Controls
			$fadeInAnimation.Add_Completed({
					$mainUI.richTextBox4.Opacity = 1
				})
			$mainUI.richTextBox4.BeginAnimation([System.Windows.Controls.RichTextBox]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.backButton2.Opacity = 1
					$mainUI.backButton2.Visibility = [System.Windows.Visibility]::Visible
				})
			$mainUI.backButton2.Visibility = [System.Windows.Visibility]::Visible
			$mainUI.backButton2.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.backButton3.Opacity = 1
					$mainUI.backButton3.Visibility = [System.Windows.Visibility]::Visible
				})
			$mainUI.backButton3.Visibility = [System.Windows.Visibility]::Visible
			$mainUI.backButton3.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.button2.Opacity = 1
					$mainUI.button2.Visibility = [System.Windows.Visibility]::Visible
					$mainUI.button2.IsEnabled = $True
					$mainUI.button2.IsHitTestVisible = $True
				})
			$mainUI.button2.Visibility = [System.Windows.Visibility]::Visible
			$mainUI.button2.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.button3.Opacity = 1
					$mainUI.button3.Visibility = [System.Windows.Visibility]::Visible
					$mainUI.button3.IsEnabled = $True
					$mainUI.button3.IsHitTestVisible = $True
				})
			$mainUI.button3.Visibility = [System.Windows.Visibility]::Visible
			$mainUI.button3.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeInAnimation)
		}
		ElseIf ($Global:scriptPhase -eq 3)
		{
			$mainUI.richTextBox4.IsEnabled = $False
			$mainUI.richTextBox4.Visibility = [System.Windows.Visibility]::Hidden
			$mainUI.richTextBox1.IsEnabled = $True
			$mainUI.richTextBox1.Visibility = [System.Windows.Visibility]::Visible
			Get-UserInformation
		}
		ElseIf ($Global:scriptPhase -eq 6)
		{
			$mainUI.titleheader1.Header = "Onboarding the Device, please wait. . ."
			$fadeOutAnimation3.Add_Completed({
					$mainUI.button1.Opacity = 0
					$mainUI.button1.IsEnabled = $False
				})
			$mainUI.button1.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeOutAnimation3)
			$fadeOutAnimation3.Add_Completed({
					$mainUI.backButton1.Opacity = 0
				})
			$mainUI.backButton1.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeOutAnimation3)
			$fadeOutAnimation3.Add_Completed({
					$mainUI.slider1.Opacity = 0
					$mainUI.slider1.IsEnabled = $False
				})
			$mainUI.slider1.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeOutAnimation3)
			$fadeOutAnimation3.Add_Completed({
					$mainUI.backSlider.Opacity = 0
				})
			$mainUI.backSlider.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeOutAnimation3)
			$fadeOutAnimation3.Add_Completed({
					$mainUI.sliderBorder.Opacity = 0
				})
			$mainUI.sliderBorder.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeOutAnimation3)
			$fadeOutAnimation3.Add_Completed({
					$mainUI.labelUser.Opacity = 0
				})
			$mainUI.labelUser.BeginAnimation([System.Windows.Controls.Label]::OpacityProperty, $fadeOutAnimation3)
			$mainUI.richTextBox1.Document.Blocks.Clear()
			$battery = Get-CimInstance -ClassName CIM_Battery
			$powerStatus = $battery.BatteryStatus
			If ($powerStatus -like "1")
			{
				
				#Output information to User
				#Define new flowDocument and Paragraph
				$flowDocument = $mainUI.richTextBox1.Document
				$paragraph = New-Object System.Windows.Documents.Paragraph
				$runObj = New-Object System.Windows.Documents.Run
				
				#Define Paragraph 1
				$paragraph.FontFamily = "Open Sans"
				$paragraph.FontSize = '12'
				$paragraph.Inlines.Add([System.Windows.Documents.Run]("This Device is "))
				$runObj.FontWeight = "Bold"
				$runObj.Text = "NOT"
				$paragraph.Inlines.Add($runObj)
				$paragraph.Inlines.Add([System.Windows.Documents.Run](" plugged-in to the Power Cable! Please Plug it in.`r`n"))
				$flowDocument.Blocks.Add($paragraph)
				$mainUI.richTextBox1.Dispatcher.Invoke(
					[Action]{ $mainUI.richTextBox1.Document = $flowDocument })
				$Global:timerBattery.Start()
			}
			Else
			{
				Create-Log -Type 1 -Message "Checking if the Device System Disk is encrypted."
				
				$fullBitlockerStatus = Get-BitLockerVolume
				
				#For each Disk in the Device
				Foreach ($volume in $fullBitlockerStatus)
				{
					
					#If the Disk is the System Disk and is encrypted
					If (($volume.ProtectionStatus -like "On") -and $volume.VolumeType -like "OperatingSystem")
					{
						$mountPoint = $volume.MountPoint
						Start-Process "manage-bde.exe" -ArgumentList "-off $mountPoint"
						
						Create-Log -Type 1 -Message "Operating System Disk is encrypted."
						Create-Log -Type 1 -Message "Beginning the unencryption of the System Disk."
						
						#Output information to User
						#Define new flowDocument and Paragraph
						$flowDocument = $mainUI.richTextBox1.Document
						$paragraph = New-Object System.Windows.Documents.Paragraph
						$runObj = New-Object System.Windows.Documents.Run
						
						#Define Paragraph 1
						$paragraph.FontFamily = "Open Sans"
						$paragraph.FontSize = '12'
						$paragraph.Inlines.Add([System.Windows.Documents.Run]("Bitlocker is "))
						$runObj.FontWeight = "Bold"
						$runObj.Text = "ENABLED"
						$paragraph.Inlines.Add($runObj)
						Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
						$runObj = New-Object System.Windows.Documents.Run
						$paragraph.Inlines.Add([System.Windows.Documents.Run](" on this Device.`r`n"))
						$paragraph.Inlines.Add([System.Windows.Documents.Run]("Setup will now unencrypt the System Disk: "))
						$runObj.FontWeight = "Bold"
						$runObj.Text = "$mountPoint"
						$paragraph.Inlines.Add($runObj)
						$flowDocument.Blocks.Add($paragraph)
						$mainUI.richTextBox1.Document = $flowDocument
						$Global:timerEncryption.Start()
					}
					Else
					{
						Validate-WinRE
					}
				}
			}
		}
		ElseIf ($Global:scriptPhase -eq 99)
		{
			$Global:dispatcherExit.Stop()
			$mainUI.Window.Close()
		}
	}
	#endregion Function Button1-Click
	
	#region Function Button2-Click
	Function Button2-Click
	{
		$mainUI.button3.IsEnabled = $False
		$mainUI.button2.IsEnabled = $False
		$mainUI.slider1.IsEnabled = $True
		If ($Global:scriptPhase -eq 2)
		{
			$mainUI.richTextBox1.VerticalScrollBarVisibility = "Hidden"
			$mainUI.titleheader1.Header = "Who will use this Device?"
			#Fade out Controls
			$fadeOutAnimation.Add_Completed({
					$mainUI.backButton2.Opacity = 0
					$mainUI.backbutton2.Visibility = [System.Windows.Visibility]::Hidden
				})
			$mainUI.backButton2.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeOutAnimation)
			$fadeOutAnimation.Add_Completed({
					$mainUI.button2.Opacity = 0
					$mainUI.button2.Visibility = [System.Windows.Visibility]::Hidden
					$mainUI.button2.IsEnabled = $False
				})
			$mainUI.button2.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeOutAnimation)
			$fadeOutAnimation.Add_Completed({
					$mainUI.backButton3.Opacity = 0
					$mainUI.backbutton3.Visibility = [System.Windows.Visibility]::Hidden
				})
			$mainUI.backButton3.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeOutAnimation)
			$fadeOutAnimation.Add_Completed({
					$mainUI.button3.Opacity = 0
					$mainUI.button3.Visibility = [System.Windows.Visibility]::Hidden
					$mainUI.button3.IsEnabled = $False
				})
			$mainUI.button3.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeOutAnimation)
			$fadeOutAnimation.Add_Completed({
					$mainUI.richTextBox4.Opacity = 0
					$mainUI.richTextBox4.Visibility = [System.Windows.Visibility]::Hidden
				})
			$mainUI.richTextBox4.BeginAnimation([System.Windows.Controls.RichTextBox]::OpacityProperty, $fadeOutAnimation)
			
			#Change Button1 Caption
			$mainUI.button1.Content = 'START'
			
			#Clear TextBox1
			$mainUI.richTextBox1.Visibility = [System.Windows.Visibility]::Visible
			$mainUI.richTextBox1.Document.Blocks.Clear()
			$flowDocument = New-Object System.Windows.Documents.FlowDocument
			$paragraph = New-Object System.Windows.Documents.Paragraph
			
			
			#Define Paragraph 1
			$runObj = New-Object System.Windows.Documents.Run
			$paragraph.FontFamily = "Open Sans"
			$paragraph.FontSize = '12'
			$paragraph.Inlines.Add([System.Windows.Documents.Run]("Please make sure that you are inputing a "))
			$runObj.FontWeight = "Bold"
			$runObj.Text = "VALID $Global:externalCompanyName Username"
			$paragraph.Inlines.Add($runObj)
			$paragraph.Inlines.Add([System.Windows.Documents.Run](".`r`n"))
			$flowDocument.Blocks.Add($paragraph)
			Remove-Variable runObj -ErrorAction SilentlyContinue -Force
			
			#Define Paragraph 2
			$runObj = New-Object System.Windows.Documents.Run
			$paragraph.Inlines.Add([System.Windows.Documents.Run]("$Global:externalCompanyName E-Mail addresses are "))
			$runObj.FontWeight = "Bold"
			$runObj.Text = "UNIQUE"
			$paragraph.Inlines.Add($runObj)
			$paragraph.Inlines.Add([System.Windows.Documents.Run](", please input the E-Mail of the person that will use this device in the field below:`r`n`r`n"))
			$paragraph.Inlines.Add([System.Windows.Documents.Run]("#ReplaceMe (Example: john.doe@mcRonalds.com)"))
			$flowDocument.Blocks.Add($paragraph)
			$mainUI.richTextBox1.Document = $flowDocument
			
			#Fade in Controls
			$fadeInAnimation.Add_Completed({
					$mainUI.border4.Opacity = 1
					$mainUI.border4.Visibility = [System.Windows.Visibility]::Visible
				})
			$mainUI.border4.BeginAnimation([System.Windows.Controls.Border]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.labelUser.Opacity = 1
					$mainUI.labelUser.Visibility = [System.Windows.Visibility]::Visible
				})
			$mainUI.labelUser.BeginAnimation([System.Windows.Controls.Label]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.backSlider.Opacity = 1
					$mainUI.backSlider.Visibility = [System.Windows.Visibility]::Visible
				})
			$mainUI.backSlider.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.sliderBorder.Opacity = 1
					$mainUI.sliderBorder.Visibility = [System.Windows.Visibility]::Visible
				})
			$mainUI.sliderBorder.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.slider1.Opacity = 1
					$mainUI.slider1.Visibility = [System.Windows.Visibility]::Visible
				})
			$mainUI.slider1.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.richTextBox1.Opacity = 1
					$mainUI.richTextBox1.Visibility = [System.Windows.Visibility]::Visible
				})
			$mainUI.richTextBox1.Visibility = [System.Windows.Visibility]::Visible
			$mainUI.richTextBox1.BeginAnimation([System.Windows.Controls.RichTextBox]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.button1.Opacity = 1
					$mainUI.button1.Visibility = [System.Windows.Visibility]::Visible
				})
			$mainUI.button1.Visibility = [System.Windows.Visibility]::Visible
			$mainUI.button1.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.backButton1.Opacity = 1
					$mainUI.backButton1.Visibility = [System.Windows.Visibility]::Visible
				})
			$mainUI.backButton1.Visibility = [System.Windows.Visibility]::Visible
			$mainUI.backButton1.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.richTextBox2.Opacity = 1
					$mainUI.richTextBox2.Visibility = [System.Windows.Visibility]::Visible
				})
			$mainUI.richTextBox2.Visibility = [System.Windows.Visibility]::Visible
			$mainUI.richTextBox2.BeginAnimation([System.Windows.Controls.RichTextBox]::OpacityProperty, $fadeInAnimation)
			$fadeInAnimation.Add_Completed({
					$mainUI.label1.Visibility = [System.Windows.Visibility]::Visible
					$mainUI.label1.Opacity = 1
					
				})
			$mainUI.label1.Visibility = [System.Windows.Visibility]::Visible
			$mainUI.label1.BeginAnimation([System.Windows.Controls.Label]::OpacityProperty, $fadeInAnimation)
			$Global:scriptPhase = 3
		}
	}
	#endregion Function Button2-Click
	
	#region Function Button3-Click
	Function Button3-Click
	{
		$Global:scriptPhase = 1
		$mainUI.richTextBox4.IsEnabled = $False
		$mainUI.richTextBox4.Visibility = [System.Windows.Visibility]::Hidden
		$mainUI.richTextBox1.IsEnabled = $True
		$mainUI.richTextBox1.Visibility = [System.Windows.Visibility]::Visible
		$mainUI.button3.IsEnabled = $False
		$mainUI.button2.IsEnabled = $False
		#Fade out Controls
		$fadeOutAnimation3.Add_Completed({
				$mainUI.richTextBox4.Opacity = 0
				$mainUI.richTextBox4.IsEnabled = $False
			})
		$mainUI.richTextBox4.BeginAnimation([System.Windows.Controls.RichTextBox]::OpacityProperty, $fadeOutAnimation3)
		$fadeOutAnimation3.Add_Completed({
				$mainUI.backButton2.Opacity = 0
				$mainUI.backbutton2.Visibility = [System.Windows.Visibility]::Hidden
			})
		$mainUI.backButton2.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeOutAnimation3)
		$fadeOutAnimation3.Add_Completed({
				$mainUI.backButton3.Opacity = 0
				$mainUI.backButton3.Visibility = [System.Windows.Visibility]::Hidden
			})
		$mainUI.backButton3.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeOutAnimation3)
		$fadeOutAnimation3.Add_Completed({
				$mainUI.button2.Opacity = 0
				$mainUI.button2.IsEnabled = $False
				$mainUI.button3.Visibility = [System.Windows.Visibility]::Hidden
			})
		$mainUI.button2.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeOutAnimation3)
		$fadeOutAnimation3.Add_Completed({
				$mainUI.button3.Opacity = 0
				$mainUI.button3.IsEnabled = $False
				$mainUI.button3.Visibility = [System.Windows.Visibility]::Hidden
				
			})
		$mainUI.button3.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeOutAnimation3)
		
		#Fade in Controls
		$fadeInAnimation3.Add_Completed({
				$mainUI.richTextBox1.Opacity = 1
				$mainUI.richTextBox1.Visibility = [System.Windows.Visibility]::Visible
				
			})
		$mainUI.richTextBox1.BeginAnimation([System.Windows.Controls.RichTextBox]::OpacityProperty, $fadeInAnimation3)
		$fadeInAnimation3.Add_Completed({
				$mainUI.backButton1.Opacity = 1
				$mainUI.backButton1.Visibility = [System.Windows.Visibility]::Visible
			})
		
		$mainUI.backButton1.Visibility = [System.Windows.Visibility]::Visible
		$mainUI.backButton1.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeInAnimation3)
		$fadeInAnimation3.Add_Completed({
				$mainUI.button1.Opacity = 1
				$mainUI.button1.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.button1.IsEnabled = $True
			})
		$mainUI.button1.Visibility = [System.Windows.Visibility]::Visible
		$mainUI.button1.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeInAnimation3)
	}
	#endregion Function Button3-Click
	
	#endregion Form Functions
	
	#region Create Authentication Token
	
	## Get key from azure and store it in the memory
	$apiInformation = Start-AzureBlobStorageTransfer -Url $BlobUrl -SasToken $BlobSasToken
	$applicationID = $apiInformation.ApplicationID
	$tenantDomainName = $apiInformation.TenantID
	$accessSecret = $apiInformation.AccessSecret
	$tokenBody = @{
		client_id	  = $applicationID
		scope		  = "https://graph.microsoft.com/.default"
		client_secret = $accessSecret
		grant_type    = "client_credentials"
	}
	$tokenRequest = Invoke-RestMethod -Method Post -Uri "https://login.microsoftonline.com/$TenantDomainName/oauth2/v2.0/token" -ContentType "application/x-www-form-urlencoded" -Body $tokenBody -UseBasicParsing
	$token = $tokenRequest.access_token
	
	#Get the token
	$Global:authHeader = @{
		'Content-Type'  = 'application\json'
		'Authorization' = "Bearer $token"
	}
	#endregion Create  Authentication Token
	
	#region Progress Validation Variables
	
	#Initialize Progress validation variables
	[bool]$Global:validation_UserInfo = $False
	[string]$Global:Owner = $Null
	[string]$Global:deviceOwnerID = $Null
	[string]$Global:companyName = $Null
	[string]$Global:groupTag = $Null
	[string]$Global:finalProfileName = $Null
	[bool]$Global:boolConnTest = $False
	[bool]$Global:validateBattery = $False
	[bool]$Global:validateEncryption = $False
	[int]$Global:jobCount = 0
	[string]$Global:cpuCompatibility = 'Not Compatible'
	$Global:secureBootStatus = 'Not Enabled'
	$biosInfo = Get-CimInstance -ClassName Win32_BIOS
	$Global:serialNumber = $biosInfo.SerialNumber
	
	#endregion Progress Validation Variables
	
	#region Main Variables
	$Global:JobTrackerList = New-Object System.Collections.ArrayList
	[int]$Global:stringSize = 95
	[string]$scriptVersion = '2.0.1.2'
	[bool]$Global:cancel = $False
	[bool]$Global:assignDeviceToUser = $True
	[int]$Global:scriptPhase = 1
	#endregion Main Variables
	
	#region GUI
	#Define GUI XAML
	[xml]$mainXAML = @"
    <Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    x:Name="window"
    Height="600"
    Width="800"
    BorderThickness="1"
    WindowStartupLocation="CenterScreen" WindowStyle="None" AllowsTransparency="True" ResizeMode="NoResize" BorderBrush="Transparent" Background="Transparent">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <SolidColorBrush x:Key="StandardBorderBrush" Color="#FFF" />
            <SolidColorBrush x:Key="StandardBackgroundBrush" Color="#FFF" />
            <SolidColorBrush x:Key="HoverBorderBrush" Color="#DDD" />
            <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="Gray" />
            <SolidColorBrush x:Key="SelectedForegroundBrush" Color="White" />
            <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
            <SolidColorBrush x:Key="NormalBrush" Color="#79b2b6" />
            <SolidColorBrush x:Key="NormalBorderBrush" Color="#888" />
            <SolidColorBrush x:Key="HorizontalNormalBrush" Color="#4d7b93" />
            <SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="#888" />
            <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
            <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
            <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
            <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
            <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
            <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
            <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
            <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
            <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
            <SolidColorBrush x:Key="GlyphBrush" Color="#444" />
            <ImageBrush x:Key="Assets1" ImageSource="$sourceLocation\sources\powerOff.png" Stretch="None"/>
            <ImageBrush x:Key="Assets2" ImageSource="$sourceLocation\sources\infoOff.png"  Stretch="None"/>
            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="CloseButton" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Assets1}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Assets1}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="infoButton" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Assets2}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Assets2}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
                        <LinearGradientBrush x:Key="ListBoxBackgroundBrush"
                StartPoint="0,0" EndPoint="1,0.001">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="White" Offset="0.0" />
                    <GradientStop Color="White" Offset="0.6" />
                            <GradientStop Color="#DDDDDD" Offset="1.2"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>
            <LinearGradientBrush x:Key="StandardBrush"
            StartPoint="0,0" EndPoint="0,1">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#FFF" Offset="0.0"/>
                    <GradientStop Color="#CCC" Offset="1.0"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
            </LinearGradientBrush>
            
            <LinearGradientBrush x:Key="PressedBrush"
            StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#BBB" Offset="0.0"/>
                        <GradientStop Color="#EEE" Offset="0.1"/>
                        <GradientStop Color="#EEE" Offset="0.9"/>
                        <GradientStop Color="#FFF" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>
            <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border
                                    Name="Border"
                                    Margin="1"
                                    CornerRadius="5"
                                    Background="{StaticResource NormalBrush}"
                                    BorderBrush="{StaticResource NormalBorderBrush}"
                                    BorderThickness="1">
                                <Path
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Fill="{StaticResource GlyphBrush}"
                                        Data="{Binding Path=Content,
                                        RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter TargetName="Border" Property="Background"
                                Value="{StaticResource PressedBrush}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground"
                                Value="{StaticResource DisabledForegroundBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border Background="Transparent" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                    <Setter Property="OverridesDefaultStyle" Value="true"/>
                    <Setter Property="IsTabStop" Value="false"/>
                    <Setter Property="Focusable" Value="false"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Thumb}">
                                <Border
                                    CornerRadius="5"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                            <ControlTemplate x:Key="VerticalScrollBar"
            TargetType="{x:Type ScrollBar}">
                <Grid >
                    <Grid.RowDefinitions>
                        <RowDefinition MaxHeight="18"/>
                        <RowDefinition Height="0.00001*"/>
                        <RowDefinition MaxHeight="18"/>
                    </Grid.RowDefinitions>
                    <Border
                    Grid.RowSpan="3"
                    CornerRadius="5"
                    Background="#F0F0F0" />
                    <RepeatButton
                    Grid.Row="0"
                    Style="{StaticResource ScrollBarLineButton}"
                    Height="18"
                    Command="ScrollBar.LineUpCommand"
                    Content="M 0 4 L 8 4 L 4 0 Z" />
                    <Track
                    Name="PART_Track"
                    Grid.Row="1"
                    IsDirectionReversed="true">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton
                            Style="{StaticResource ScrollBarPageButton}"
                            Command="ScrollBar.PageUpCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb
                            Style="{StaticResource ScrollBarThumb}"
                            Margin="1,0,1,0"
                            Background="{StaticResource HorizontalNormalBrush}"
                            BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton
                            Style="{StaticResource ScrollBarPageButton}"
                            Command="ScrollBar.PageDownCommand" />
                        </Track.IncreaseRepeatButton>
                    </Track>
                    <RepeatButton
                        Grid.Row="3"
                        Style="{StaticResource ScrollBarLineButton}"
                        Height="18"
                        Command="ScrollBar.LineDownCommand"
                        Content="M 0 0 L 4 4 L 8 0 Z"/>
                </Grid>
            </ControlTemplate>
            <ControlTemplate x:Key="HorizontalScrollBar"
            TargetType="{x:Type ScrollBar}">
                <Grid >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MaxWidth="18"/>
                        <ColumnDefinition Width="0.00001*"/>
                        <ColumnDefinition MaxWidth="18"/>
                    </Grid.ColumnDefinitions>
                    <Border
      Grid.ColumnSpan="3"
      CornerRadius="5"
      Background="#F0F0F0" />
                    <RepeatButton
      Grid.Column="0"
      Style="{StaticResource ScrollBarLineButton}"
      Width="18"
      Command="ScrollBar.LineLeftCommand"
      Content="M 4 0 L 4 8 L 0 4 Z" />
                    <Track
      Name="PART_Track"
      Grid.Column="1"
      IsDirectionReversed="False">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageLeftCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb
          Style="{StaticResource ScrollBarThumb}"
          Margin="0,1,0,1"
          Background="{StaticResource NormalBrush}"
          BorderBrush="{StaticResource NormalBorderBrush}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageRightCommand" />
                        </Track.IncreaseRepeatButton>
                    </Track>
                    <RepeatButton
      Grid.Column="3"
      Style="{StaticResource ScrollBarLineButton}"
      Width="18"
      Command="ScrollBar.LineRightCommand"
      Content="M 0 0 L 4 4 L 0 8 Z"/>
                </Grid>
            </ControlTemplate>
            <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto"/>
                        <Setter Property="Height" Value="18" />
                        <Setter Property="Template"
                        Value="{StaticResource HorizontalScrollBar}" />
                    </Trigger>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Width" Value="18"/>
                        <Setter Property="Height" Value="Auto" />
                        <Setter Property="Template"
                        Value="{StaticResource VerticalScrollBar}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="FavsScrollViewer" TargetType="{x:Type ScrollViewer}">
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <ScrollContentPresenter Grid.Column="1"/>

                            <ScrollBar Name="PART_VerticalScrollBar"
            Value="{TemplateBinding VerticalOffset}"
            Maximum="{TemplateBinding ScrollableHeight}"
            ViewportSize="{TemplateBinding ViewportHeight}"
            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                        <ScrollBar Name="PART_HorizontalScrollBar"
            Orientation="Horizontal"
            Grid.Row="1"
            Grid.Column="1"
            Value="{TemplateBinding HorizontalOffset}"
            Maximum="{TemplateBinding ScrollableWidth}"
            ViewportSize="{TemplateBinding ViewportWidth}"
            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
        </ResourceDictionary>
    </Window.Resources>
    <Border x:Name="border1" CornerRadius="52" BorderThickness="10" BorderBrush="White">
            <Border.Effect>
            <DropShadowEffect BlurRadius="7" Direction="-90"
                              RenderingBias="Quality" ShadowDepth="5"/>
        </Border.Effect>
        <Border x:Name="border2" CornerRadius="35" BorderThickness="20">
            <Border.BorderBrush>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                    <GradientStop Color="#79b2b6" Offset="0.0">
                    </GradientStop>
                    <GradientStop Color="#4d7b93" Offset="0.5">
                    </GradientStop>
                    <GradientStop Color="#79b2b6" Offset="1.0">
                    </GradientStop>
                </LinearGradientBrush>
            </Border.BorderBrush>
            <Grid x:Name="grid1" Margin="-5,-5,-5,-5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="195*"/>
                    <RowDefinition Height="74*"/>
                </Grid.RowDefinitions>
                <Grid.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                        <GradientStop Color="#79b2b6" Offset="0.0">
                        </GradientStop>
                        <GradientStop Color="#4d7b93" Offset="0.5">
                        </GradientStop>
                        <GradientStop Color="#79b2b6" Offset="1.0">
                        </GradientStop>
                    </LinearGradientBrush>
                </Grid.Background>
                    <Controls:Flyout x:Name="flyoutControl" Grid.Row="0" Position="Right" Width="200" IsPinned="False" Background="#00000000" Controls:HeaderedControlHelper.HeaderBackground="White" AnimateOpacity="True" CloseButtonVisibility="Hidden">
                    <Border x:Name="borderFylout" CornerRadius="25" Background="White" Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:Flyout}},Path=ActualWidth}" Margin="0,-25,0,55">
                                   <Border.Effect>
            <DropShadowEffect BlurRadius="10" Direction="-90"
                              RenderingBias="Quality" ShadowDepth="2"/>
        </Border.Effect>
                       <Grid>
                            <Controls:MetroHeader x:Name="aboutInfo"
                            Controls:HeaderedControlHelper.HeaderFontWeight="Bold"
                            Header="$Global:externalCompanyName Autopilot Tool"
                            Controls:HeaderedControlHelper.HeaderFontSize="14"
                    Controls:HeaderedControlHelper.HeaderFontFamily="Open Sans"
                    Controls:HeaderedControlHelper.HeaderHorizontalContentAlignment="Center"
                    Margin="10,10,10,10"
                    HorizontalAlignment="Center" VerticalAlignment="Top"/>
                            <RichTextBox x:Name="infoTextBox" IsReadOnly="True" IsDocumentEnabled="True" Margin="5,40,5,5" Background="Transparent" FontFamily="Open Sans">
                                <FlowDocument>
                                    <Paragraph>
                                        <Run Text="Version: "/>
                                        <TextBlock FontWeight="Bold">
                                            <Run Text="$scriptVersion"/>
                                        </TextBlock>
                                        <LineBreak/>
                                        <Run Text="Authors:"/>
                                        <LineBreak/>
                                        <Run Text="Joao Pereira - jgcpereira@gmail.com"/>
                                        <LineBreak/>
                                        <Run Text="Ferry Bodjin"/>
                                        <LineBreak/>
                                        <Run FontWeight="Bold" Text="#ReplaceME: Your IT Department Title Here"/>
                                        <LineBreak/>
                                        <LineBreak/>
                                        <LineBreak/>
                                        <LineBreak/>
                                        <LineBreak/>
                                        <LineBreak/>
                                        <LineBreak/>
                                        <TextBlock FontWeight="Bold" TextAlignment="Center"> 
                                            <Run Text="$Global:externalCompanyName"/>
                                            <LineBreak/>
                                            <Run Text="© 2022 $Global:externalCompanyName Corporation"/>
                                            <LineBreak/>
                                            <Run Text="All rights reserved."/>
                                        </TextBlock>
                                    </Paragraph>
                                </FlowDocument>
                            </RichTextBox>
                        </Grid>
                    </Border>
                </Controls:Flyout>
                <Button x:Name="closebutton" Style="{DynamicResource CloseButton}" BorderThickness="0" BorderBrush="Transparent" HorizontalAlignment="Left" Height="45" Width="44" Margin="694,0,0,0" VerticalAlignment="Top">
                    <Button.Background>
                        <ImageBrush ImageSource="$sourceLocation\sources\powerOn.png" Stretch="None"/>
                    </Button.Background>

                </Button>
                <Button x:Name="infoButton" Style="{DynamicResource infoButton}" Content="" BorderThickness="0" BorderBrush="Transparent" HorizontalAlignment="Left" Height="45" Width="44" Margin="645,0,0,0" VerticalAlignment="Top">
                    <Button.Background>
                        <ImageBrush ImageSource="C:\ProgramData\VIT-MEM-AutopilotTool\sources\infoOn.png" Stretch="None"/>
                    </Button.Background>

                </Button>
                <Controls:MetroHeader x:Name="titleheader1"
                    Controls:HeaderedControlHelper.HeaderFontWeight="Bold"
                    Header="Welcome to $Global:externalCompanyName's Intune Autopilot Setup Process. . ."
                    Controls:HeaderedControlHelper.HeaderFontSize="16"
                    Controls:HeaderedControlHelper.HeaderFontFamily="Open Sans"
                    Controls:HeaderedControlHelper.HeaderHorizontalContentAlignment="Left"
                    Margin="10,10,0,0"
                    HorizontalAlignment="Left" Width="500" Height="40" VerticalAlignment="Top" Foreground="White"/>
                <Border x:Name="border3" CornerRadius="25" BorderThickness="0,0,0,0" Margin="30,50,30,56" Padding="5" BorderBrush="#FFC9C9C9" OpacityMask="White" Background="#7FFFFFFF">
                    <Grid x:Name="grid3" ClipToBounds="True" Margin="0,0,0,0">
                        <RichTextBox x:Name="richTextBox1" VerticalScrollBarVisibility="Visible" IsDocumentEnabled="True" Margin="5,5,5,5" FontFamily="Open Sans" FontSize="12" FontWeight="Normal" IsReadOnly="True" AllowDrop="False" BorderBrush="Transparent" BorderThickness="0,0,0,0" Background="Transparent">
                            <FlowDocument>
                                <Paragraph>
                                    <Run Text="This tool will help you migrate your existing Device to the $Global:externalCompanyName Mobile Device Management system called"/>
                                </Paragraph>
                                <Paragraph>
                                    <Run FontWeight="Bold" Text="Intune"/>
                                    <Run Text="."/>
                                </Paragraph>
                                <Paragraph>
                                    <Run Text="You can " />
                                    <TextBlock> 
                                        <Hyperlink x:Name="link1">
                                            read more about the management system here
                                        </Hyperlink>
                                    </TextBlock>
                                </Paragraph>
                                <Paragraph>This tool will also Enforce $Global:externalCompanyName Global Security Policies.</Paragraph>
                                <Paragraph>
                                    <Run Text="You can " />
                                    <TextBlock>                
                                        <Hyperlink x:Name="link2">
                                            read more about the $Global:externalCompanyName Security policies here
                                        </Hyperlink>
                                    </TextBlock>
                                </Paragraph>
                                <Paragraph></Paragraph>
                                <Paragraph>
                                    <Run FontWeight="Bold" Text="Note:"/>
                                </Paragraph>
                                <Paragraph>
                                    <Run Text="This Tool will "/>
                                    <Run FontWeight="Bold" Text="COMPLETELY FORMAT YOUR DEVICE"/>
                                    <Run Text=" at the end of the process."/>
                                </Paragraph>
                                <Paragraph>
                                    <Run Text="Please "/>
                                    <Run FontWeight="Bold" Text="SAVE ALL YOUR LOCAL DATA"/>
                                    <Run Text=" to Google Drive or a USB Device."/>
                                </Paragraph>
                            </FlowDocument>
                        </RichTextBox>
                        <RichTextBox x:Name="richTextBox4" VerticalScrollBarVisibility="Visible" IsDocumentEnabled="True" Margin="5,5,5,5" FontFamily="Open Sans" FontSize="12" FontWeight="Normal" IsReadOnly="True" AllowDrop="False" BorderBrush="Transparent" BorderThickness="0,0,0,0" Background="Transparent">
                        <FlowDocument>
                                <Paragraph>
                                    <Run Text="If you click "/>
                                    <Run FontWeight="Bold" Text="I Agree"/>
                                    <Run Text=" this Device will start the enrollment process towards $Global:externalCompanyName Intune."/>
                                </Paragraph>
                                <Paragraph>
                                    <Run Text="This Device will become cloud-managed via a Mobile Device Management system called " />
                                    <Run FontWeight="Bold" Text="Intune"/>
                                    <Run Text="."/>
                                    <LineBreak/>
                                    <Run Text="   • You can "/>
                                    <TextBlock>
                                        <Hyperlink x:Name="link3">
                                            read more about the management system here
                                        </Hyperlink>
                                        </TextBlock>
                                </Paragraph>
                                <Paragraph>This tool will also Enforce $Global:externalCompanyName Global Security Policies.</Paragraph>
                                <Paragraph>
                                    <Run Text="   • You can " />
                                    <TextBlock>                
                                        <Hyperlink x:Name="link4">
                                            read more about the $Global:externalCompanyName Security policies here
                                        </Hyperlink>
                                    </TextBlock>
                                </Paragraph>
                                <Paragraph>
                                    <Run Text="This Device will be fully " />
                                    <Run FontWeight="Bold" Text="WIPED/FORMATED"/>
                                    <Run Text="."/>
                                    <LineBreak/>
                                    <Run Text=" • This means " />
                                    <Run FontWeight="Bold" Text="all data on this Device will be deleted"/>
                                    <Run Text="."/>
                                    <LineBreak/>
                                    <Run Text=" • It is your responsibility to " />
                                    <Run FontWeight="Bold" Text="save all your local data"/>
                                    <Run Text="."/>
                                </Paragraph>
                                <Paragraph>
                                    <Run FontWeight="Bold" Text="Sugestions:"/>
                                    <LineBreak/>
                                    <Run Text=" ○  " />
                                    <TextBlock>                
                                        <Hyperlink x:Name="link5">
                                            How to save your local data to Google Drive
                                        </Hyperlink>
                                    </TextBlock>
                                    <LineBreak/>
                                    <Run Text=" ○  " />
                                    <TextBlock>                
                                        <Hyperlink x:Name="link6">
                                            Youtube video on How to save your local data to Google Drive
                                        </Hyperlink>
                                    </TextBlock>
                                </Paragraph>
                                <Paragraph>
                                    <Run Text="Click "/>
                                    <Run FontWeight="Bold" Text="Cancel"/>
                                    <Run Text=" if you want to "/>
                                    <Run FontWeight="Bold" Text="save your local data"/>
                                    <Run Text=" to Google Drive or to an external USB Device, before running"/>
                                    <LineBreak/>
                                    <Run Text="the $Global:externalCompanyName Autopilot Tool."/>
                                </Paragraph>
                            </FlowDocument>
                    </RichTextBox>
                    </Grid>
                </Border>
                <Image x:Name="backButton2" HorizontalAlignment="Left" Height="42" Margin="30,10,0,0" Grid.Row="1" VerticalAlignment="Top" Width="100" Source="$sourceLocation\sources\buttonBackground.png"/>
                <Image x:Name="backButton1" HorizontalAlignment="Center" Height="42" Margin="0,10,0,0" Grid.Row="1" VerticalAlignment="Top" Width="100" Source="$sourceLocation\sources\buttonBackground.png"/>
                <Image x:Name="backButton3" HorizontalAlignment="Left" Height="42" Margin="608,10,0,0" Grid.Row="1" VerticalAlignment="Top" Width="100" Source="$sourceLocation\sources\buttonBackground.png"/>
                <Button x:Name="button2" Content="I Agree" HorizontalAlignment="Left" Margin="30,14,0,0" Grid.Row="1" VerticalAlignment="Top" Width="100" RenderTransformOrigin="0.5,0.5" Height="33" FontFamily="Open Sans" FontSize="14" FontWeight="Bold">
                    <Button.Background>
                        <ImageBrush ImageSource="$sourceLocation\sources\button2.png" Stretch="UniformToFill" TileMode="None">
                        </ImageBrush>
                    </Button.Background>
                    <Button.Resources>
                        <Style TargetType="Border">
                            <Setter Property="CornerRadius" Value="20"/>
                        </Style>
                    </Button.Resources>
                </Button>
                <Button x:Name="button1" Content="Begin" HorizontalAlignment="Center" Margin="-1,14,0,0" Grid.Row="1" VerticalAlignment="Top" Width="100" Height="33" FontFamily="Open Sans" FontSize="14" FontWeight="Bold">
                    <Button.Resources>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="CornerRadius" Value="20"/>
                        </Style>
                    </Button.Resources>
                    <Button.Background>
                        <ImageBrush ImageSource="$sourceLocation\sources\button1.png" Stretch="UniformToFill" TileMode="None">
                        </ImageBrush>
                    </Button.Background>
                </Button>
                <Button x:Name="button3" Content="Cancel" HorizontalAlignment="Left" Margin="608,14,0,0" Grid.Row="1" VerticalAlignment="Top" Width="100" RenderTransformOrigin="0.5,0.5" Height="32" FontFamily="Open Sans" FontSize="14" FontWeight="Bold">
                    <Button.Resources>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="CornerRadius" Value="20"/>
                        </Style>
                    </Button.Resources>
                    <Button.Background>
                        <ImageBrush ImageSource="$sourceLocation\sources\button3.png" Stretch="UniformToFill" TileMode="None">
                        </ImageBrush>
                    </Button.Background>
                </Button>
                <Label x:Name="label1" Content="Username:" HorizontalAlignment="Left" Margin="35,72,0,0" Grid.Row="1" VerticalAlignment="Top" FontFamily="Open Sans" FontSize="14" FontWeight="Bold"/>
                <Border x:Name="border4" CornerRadius="15" BorderBrush="LightGray" BorderThickness="0" Grid.Row="1" Margin="126,68,319,45" Background="#7FFFFFFF">
                    <TextBox x:Name="richTextBox2" Background="Transparent" Margin="0,0,0,0" FontFamily="Open Sans" FontSize="14" BorderBrush="#00ABADB3" Width="300" VerticalContentAlignment="Center" VerticalAlignment="Center" HorizontalAlignment="Left" BorderThickness="0,0,0,0">
                        #eplaceMe Example: john.doe@mcronalds.com
                    </TextBox>
                </Border>
                <Border x:Name="sliderBorder" Height="40" Width="102" CornerRadius="25" Margin="587,65,20,0" Grid.Row="1" VerticalAlignment="Top">
                                    <Border.Background>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop x:Name="grad1" Color="#79b2b6"/>
                            <GradientStop x:Name="grad2" Color="#4d7b93" Offset="1"/>
                        </LinearGradientBrush>
                    </Border.Background>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="2*"/>
                            <ColumnDefinition Width="31*"/>
                        </Grid.ColumnDefinitions>
                        <Image x:Name="backSlider" HorizontalAlignment="Center" Height="41" VerticalAlignment="Center" Width="102" Source="C:\ProgramData\VIT-MEM-AutopilotTool\sources\buttonBackground.png" Stretch="UniformToFill" Grid.ColumnSpan="2"/>
                        <Button x:Name="slider1" Width="38" Height="35" Margin="55,2,2,2" Grid.Column="1">
                            <Button.Background>
                                <ImageBrush ImageSource="C:\ProgramData\VIT-MEM-AutopilotTool\sources\sliderOn.png" Stretch="Uniform" TileMode="Tile"/>
                            </Button.Background>
                        </Button>
                    </Grid>
                </Border>
                <Label x:Name="labelUser" FontFamily="Open Sans" FontWeight="Bold" Content="Device will be assigned to User" HorizontalAlignment="Right" Margin="0,115,10,0" Grid.Row="1" VerticalAlignment="Top" TextBlock.TextAlignment="Right" />
            </Grid>
        </Border>
    </Border>
</Window>
"@
	
	#Define Animations
	$fadeInAnimation = [System.Windows.Media.Animation.DoubleAnimation]::new(0, 1, [System.Windows.Duration]::new([Timespan]::FromSeconds(1)))
	$fadeOutAnimation = [System.Windows.Media.Animation.DoubleAnimation]::new(1, 0, [System.Windows.Duration]::new([Timespan]::FromSeconds(1)))
	$fadeInAnimation2 = [System.Windows.Media.Animation.DoubleAnimation]::new(0, 1, [System.Windows.Duration]::new([Timespan]::FromSeconds(1)))
	$fadeOutAnimation2 = [System.Windows.Media.Animation.DoubleAnimation]::new(1, 0, [System.Windows.Duration]::new([Timespan]::FromSeconds(1)))
	$fadeInAnimation3 = [System.Windows.Media.Animation.DoubleAnimation]::new(0, 1, [System.Windows.Duration]::new([Timespan]::FromSeconds(1)))
	$fadeOutAnimation3 = [System.Windows.Media.Animation.DoubleAnimation]::new(1, 0, [System.Windows.Duration]::new([Timespan]::FromSeconds(1)))
	
	# Create a synchronized hash table and add the WPF window and its named elements to it
	$reader = (New-Object System.Xml.XmlNodeReader $mainXAML)
	$mainUI.Window = [Windows.Markup.XamlReader]::Load($reader)
	
	#Load control variables
	$mainXAML.SelectNodes("//*[@*[contains(translate(name(.),'n','N'),'Name')]]") | ForEach-Object -Process {
		$mainUI.$($_.Name) = $mainUI.Window.FindName($_.Name)
	}
	
	#Initialize Form Click Actions
	$mainUI.link1.Add_Click({
			[system.Diagnostics.Process]::start(#ReplaceMe Link to MEM Intune information)
		})
	$mainUI.link2.Add_Click({
			[system.Diagnostics.Process]::start(#ReplaceMe Link to Company Security Policies information)
		})
	$mainUI.link3.Add_Click({
			[system.Diagnostics.Process]::start(#ReplaceMe Link to MEM Intune information)
		})
	$mainUI.link4.Add_Click({
			[system.Diagnostics.Process]::start(#ReplaceMe Link to Company Security Policies information)
		})
	$mainUI.link5.Add_Click({
			[system.Diagnostics.Process]::start(#ReplaceMe Link to Tutorial on How to upload information to Google Drive)
						})
					#Link to Youtube Video on How to upload information to Google Drive
	$mainUI.link6.Add_Click({
			[system.Diagnostics.Process]::start("https://www.youtube.com/watch?v=_F6lVafgExo")
		})
	$mainUI.button1.Add_Click({
			Button1-Click
		})
	$mainUI.button2.Add_Click({
			Button2-Click
		})
	$mainUI.button3.Add_Click({
			Button3-Click
		})
	$mainUI.infoButton.Add_Click({
			If (!($mainUI.flyoutControl.IsOpen))
			{
				$mainUI.backButton1.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.button1.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.backButton2.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.button2.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.backButton3.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.button3.Visibility = [System.Windows.Visibility]::Hidden
				If ($Global:scriptPhase -eq 2)
				{
					$mainUI.richTextBox4.Visibility = [System.Windows.Visibility]::Hidden
				}
				$mainUI.richTextBox1.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.border4.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.label1.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.labelUser.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.backSlider.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.slider1.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.sliderBorder.Visibility = [System.Windows.Visibility]::Hidden
				$mainUI.flyoutControl.IsOpen = $True
				
			}
			ElseIf ($mainUI.flyoutControl.IsOpen)
			{
				$mainUI.backButton1.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.button1.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.richTextBox1.Visibility = [System.Windows.Visibility]::Visible
				If ($Global:scriptPhase -eq 2)
				{
					$mainUI.richTextBox4.Visibility = [System.Windows.Visibility]::Visible
				}
				$mainUI.backButton2.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.button2.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.backButton3.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.button3.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.border4.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.label1.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.backSlider.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.slider1.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.labelUser.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.sliderBorder.Visibility = [System.Windows.Visibility]::Visible
				$mainUI.flyoutControl.IsOpen = $False
			}
		})
	$mainUI.closebutton.Add_Click({
			$Global:ExitScript = $True
			Stop-JobTracker
			$mainUI.Window.Close()
		})
	$mainUI.slider1.Add_Click({
			$margin = $mainUI.slider1.Margin
			$newMargin = $margin
			If ($Global:assignDeviceToUser)
			{
				$NewMargin.Left = "-63"
				$gradientAnimation = [System.Windows.Media.Animation.ColorAnimation]::new($mainUI.grad1.Color, "#FFB4B4B4", [System.Windows.Duration]::new([Timespan]::FromMilliseconds(500)))
				$gradient1Animation = [System.Windows.Media.Animation.ColorAnimation]::new($mainUI.grad2.Color, "White", [System.Windows.Duration]::new([Timespan]::FromMilliseconds(500)))
				$gradientOffAnim = [System.Windows.Media.Animation.DoubleAnimation]::new($mainUI.grad2.Offset, 1, [System.Windows.Duration]::new([Timespan]::FromMilliseconds(500)))
				$rollOutAnimation = [System.Windows.Media.Animation.ThicknessAnimation]::new($margin, $newMargin, [System.Windows.Duration]::new([Timespan]::FromMilliseconds(500)))
				$mainUI.labelUser.Content = "Device will NOT be assigned to User"
				$uri = new-object system.uri("$sourceLocation\sources\sliderOff.png")
				$imagesource = new-object System.Windows.Media.Imaging.BitmapImage $uri
				$imagebrush = new-object System.Windows.Media.ImageBrush $imagesource
				$imagebrush.Stretch = "UniformToFill"
				$mainUI.slider1.Background = $imagebrush
				$mainUI.grad1.BeginAnimation([System.Windows.Media.GradientStop]::ColorProperty, $gradientAnimation)
				$mainUI.grad2.BeginAnimation([System.Windows.Media.GradientStop]::ColorProperty, $gradient1Animation)
				$mainUI.grad2.BeginAnimation([System.Windows.Media.GradientStop]::OffsetProperty, $gradientOffAnim)
				$mainUI.slider1.BeginAnimation([System.Windows.Controls.Button]::MarginProperty, $rollOutAnimation)
				$Global:assignDeviceToUser = $False
				$Global:deviceToUser = 'False'
			}
			Else
			{
				$NewMargin.Left = "55"
				$gradientAnimation = [System.Windows.Media.Animation.ColorAnimation]::new($mainUI.grad1.Color, "#79b2b6", [System.Windows.Duration]::new([Timespan]::FromMilliseconds(500)))
				$gradient1Animation = [System.Windows.Media.Animation.ColorAnimation]::new($mainUI.grad2.Color, "#4d7b93", [System.Windows.Duration]::new([Timespan]::FromMilliseconds(500)))
				$gradientOffAnim = [System.Windows.Media.Animation.DoubleAnimation]::new($mainUI.grad2.Offset, 1, [System.Windows.Duration]::new([Timespan]::FromMilliseconds(500)))
				$rollOutAnimation = [System.Windows.Media.Animation.ThicknessAnimation]::new($margin, $newMargin, [System.Windows.Duration]::new([Timespan]::FromMilliseconds(500)))
				$mainUI.labelUser.Content = "Device will be assigned to User"
				$uri = new-object system.uri("$sourceLocation\sources\sliderOn.png")
				$imagesource = new-object System.Windows.Media.Imaging.BitmapImage $uri
				$imagebrush = new-object System.Windows.Media.ImageBrush $imagesource
				$imagebrush.Stretch = "UniformToFill"
				$mainUI.slider1.Background = $imagebrush
				$mainUI.grad1.BeginAnimation([System.Windows.Media.GradientStop]::ColorProperty, $gradientAnimation)
				$mainUI.grad2.BeginAnimation([System.Windows.Media.GradientStop]::ColorProperty, $gradient1Animation)
				$mainUI.grad2.BeginAnimation([System.Windows.Media.GradientStop]::OffsetProperty, $gradientOffAnim)
				$mainUI.slider1.BeginAnimation([System.Windows.Controls.Button]::MarginProperty, $rollOutAnimation)
				$Global:assignDeviceToUser = $True
				$Global:deviceToUser = 'True'
			}
		})
	$mainUI.richTextBox2.Add_PreviewMouseDown({
			$mainUI.richTextBox2.Text = $Null
		})
	$mainUI.Window.Add_MouseLeftButtonDown({
			$mainUI.WIndow.DragMove()
		})
	$mainUI.richTextBox2.PreviewKeyDown({
			If ($_.KeyCode -eq 'Enter')
			{
				$_.SuppressKeyPress = $True
				$_.Handled = $True
				$mainUI.button1.Click
			}
		})
	$mainUI.button1.Add_KeyDown({
			$_.SuppressKeyPress = $True
			$_.Handled = $True
		})
	$mainUI.richTextBox1.Add_KeyDown({
			$_.SuppressKeyPress = $True
		})
	$mainUI.richTextBox4.Add_KeyDown({
			$_.SuppressKeyPress = $True
		})
	
	#Initiaize Form Hover Actions
	$mainUI.button1.Add_MouseEnter({
			$mainUI.button1.Foreground = "#FFF"
		})
	$mainUI.button1.Add_MouseLeave({
			$mainUI.button1.Foreground = "#000"
		})
	$mainUI.button2.Add_MouseEnter({
			$mainUI.button2.Foreground = "#FFF"
		})
	$mainUI.button2.Add_MouseLeave({
			$mainUI.button2.Foreground = "#000"
		})
	$mainUI.button3.Add_MouseEnter({
			$mainUI.button3.Foreground = "#FFF"
		})
	$mainUI.button3.Add_MouseLeave({
			$mainUI.button3.Foreground = "#000"
		})
	
	#Initialize Form Variables
	$Global:dispatcherCurrentTime = 0
	$mainUI.button2.IsEnabled = $False
	$mainUI.button3.IsEnabled = $False
	$mainUI.slider1.IsEnabled = $False
	$mainUI.richTextBox4.Opacity = 0
	$mainUI.richTextBox4.Visibility = [System.Windows.Visibility]::Hidden
	$mainUI.titleheader1.Opacity = 0
	$mainUI.backButton1.Opacity = 0
	$mainUI.backButton2.Opacity = 0
	$mainUI.backButton3.Opacity = 0
	$mainUI.button1.Opacity = 0
	$mainUI.button2.Opacity = 0
	$mainUI.button3.Opacity = 0
	$mainUI.slider1.Opacity = 0
	$mainUI.backSlider.Opacity = 0
	$mainUI.label1.Opacity = 0
	$mainUI.labelUser.Opacity = 0
	$mainUI.border3.Opacity = 0
	$mainUI.border4.Opacity = 0
	$mainUI.sliderBorder.Opacity = 0
	
	#Define Dispatchers Code
	$introCode = {
		If ($Global:dispatcherCurrentTime -eq 0)
		{
			$fadeInAnimation.Add_Completed({
					$mainUI.border3.Opacity = 1
				})
			$mainUI.border3.BeginAnimation([System.Windows.Controls.Border]::OpacityProperty, $fadeInAnimation)
		}
		ElseIf ($Global:dispatcherCurrentTime -eq 1)
		{
			$fadeInAnimation.Add_Completed({
					$mainUI.backbutton1.Opacity = 1
					$mainUI.button1.Opacity = 1
					$Global:dispatcherTimer.Stop()
				})
			$mainUI.backbutton1.BeginAnimation([System.Windows.Controls.Image]::OpacityProperty, $fadeInAnimation)
			$mainUI.button1.BeginAnimation([System.Windows.Controls.Button]::OpacityProperty, $fadeInAnimation)
		}
		$Global:dispatcherCurrentTime = $Global:dispatcherCurrentTime + 1
	}
	$trackerCode = { Update-JobTracker }
	$batteryCode = {
		$Global:jobCount = $Global:jobCount + 500
		If ($Global:jobCount -ge 5000)
		{
			If ($Global:validateBattery -eq $False)
			{
				Run-BatteryCheckRunSpace
			}
			Else
			{
				$Global:timerBattery.Stop()
				$mainUI.richTextBox1.Document.Blocks.Clear()
				Create-Log -Type 1 -Message "Checking if the Device System Disk is encrypted."
				
				$fullBitlockerStatus = Get-BitLockerVolume
				
				#For each Disk in the Device
				Foreach ($volume in $fullBitlockerStatus)
				{
					
					#If the Disk is the System Disk and is encrypted
					If (($volume.ProtectionStatus -like "On") -and $volume.VolumeType -like "OperatingSystem")
					{
						$mountPoint = $volume.MountPoint
						Start-Process "manage-bde.exe" -ArgumentList "-off $mountPoint"
						
						Create-Log -Type 1 -Message "Operating System Disk is encrypted."
						Create-Log -Type 1 -Message "Beginning the unencryption of the System Disk."
						
						
						#Output information to User
						#Define new flowDocument and Paragraph
						$flowDocument = $mainUI.richTextBox1.Document
						$paragraph = New-Object System.Windows.Documents.Paragraph
						$runObj = New-Object System.Windows.Documents.Run
						
						#Define Paragraph 1
						$paragraph.FontFamily = "Open Sans"
						$paragraph.FontSize = '12'
						$paragraph.Inlines.Add([System.Windows.Documents.Run]("Bitlocker is "))
						$runObj.FontWeight = "Bold"
						$runObj.Text = "ENABLED"
						$paragraph.Inlines.Add($runObj)
						Remove-Variable runObj -WarningAction SilentlyContinue -ErrorAction SilentlyContinue -Force
						$runObj = New-Object System.Windows.Documents.Run
						$paragraph.Inlines.Add([System.Windows.Documents.Run](" on this Device.`r`n"))
						$paragraph.Inlines.Add([System.Windows.Documents.Run]("Setup will now unencrypt the System Disk: "))
						$runObj.FontWeight = "Bold"
						$runObj.Text = "$mountPoint"
						$paragraph.Inlines.Add($runObj)
						$flowDocument.Blocks.Add($paragraph)
						$mainUI.richTextBox1.Dispatcher.Invoke(
							[Action]{ $mainUI.richTextBox1.Document = $flowDocument })
						$Global:timerEncryption.Start()
					}
					Else
					{
						$mainUI.richTextBox1.Document.Blocks.Clear()
						Validate-WinRE
					}
				}
			}
			$Global:jobCount = 0
		}
	}
	$encryptionCode = {
		$Global:jobCount = $Global:jobCount + 500
		If ($Global:jobCount -ge 5000)
		{
			If ($Global:validateEncryption -eq $False)
			{
				Disable-EncryptionRunspace
			}
			Else
			{
				$Global:timerEncryption.Stop()
				$mainUI.richTextBox1.Document.Blocks.Clear()
				Validate-WinRE
			}
			$Global:jobCount = 0
		}
	}
	$dispatcherExitCode = {
		$Global:jobCount = $Global:jobCount + 500
		If ($Global:jobCount -ge 10000)
		{
			$Global:dispatcherExit.Stop()
			$mainUI.Window.Close()
		}
	}
	
	#Define  Internal Dispatcher Timers
	$Global:dispatcherExit = New-Object -TypeName System.Windows.Threading.DispatcherTimer
	$Global:dispatcherTimer = New-Object -TypeName System.Windows.Threading.DispatcherTimer
	$Global:timerJobTracker = New-Object -TypeName System.Windows.Threading.DispatcherTimer
	$Global:timerBattery = New-Object -TypeName System.Windows.Threading.DispatcherTimer
	$Global:timerEncryption = New-Object -TypeName System.Windows.Threading.DispatcherTimer
	
	$Global:dispatcherExit.Interval = [timespan]"0:0:0.50"
	$Global:dispatcherExit.Add_Tick($dispatcherExitCode)
	$Global:timerEncryption.Interval = [timespan]"0:0:0.50"
	$Global:timerEncryption.Add_Tick($encryptionCode)
	$Global:timerBattery.Interval = [timespan]"0:0:0.50"
	$Global:timerBattery.Add_Tick($batteryCode)
	$Global:timerJobTracker.Interval = [timespan]"0:0:0.50"
	$Global:timerJobTracker.Add_Tick($trackerCode)
	$Global:dispatcherTimer.Interval = [timespan]"0:0:1.00"
	$Global:dispatcherTimer.Add_Tick($introCode)
	#Initialize first Intro Animation
	$fadeInAnimation.Add_Completed({
			$mainUI.titleheader1.Opacity = 1
		})
	$mainUI.titleheader1.BeginAnimation([System.Windows.Controls.TextBlock]::OpacityProperty, $fadeInAnimation)
	
	#Initialize Form
	$Global:dispatcherTimer.Start()
	$mainUI.Window.ShowDialog()
	$mainUI.Error = $Error
	
	#endregion GUI